#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_FluxWorldPainter

#include "Basic.hpp"

#include "BPI_FluxWorldPainter_classes.hpp"
#include "BPI_FluxWorldPainter_parameters.hpp"


namespace SDK
{

// Function BPI_FluxWorldPainter.BPI_FluxWorldPainter_C.ApplyMaterialParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> Materials                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void IBPI_FluxWorldPainter_C::ApplyMaterialParameters(const TArray<class UMaterialInstanceDynamic*>& Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxWorldPainter_C", "ApplyMaterialParameters");

	Params::BPI_FluxWorldPainter_C_ApplyMaterialParameters Parms{};

	Parms.Materials = std::move(Materials);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxWorldPainter.BPI_FluxWorldPainter_C.OnRepaintBrushes
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxWorldPainter_C::OnRepaintBrushes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxWorldPainter_C", "OnRepaintBrushes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_FluxWorldPainter.BPI_FluxWorldPainter_C.RenderScenePainter
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxWorldPainter_C::RenderScenePainter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxWorldPainter_C", "RenderScenePainter");

	UObject::ProcessEvent(Func, nullptr);
}

}

