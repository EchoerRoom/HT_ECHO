#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InstanceSplineMesh

#include "Basic.hpp"

#include "InstanceSplineMesh_classes.hpp"
#include "InstanceSplineMesh_parameters.hpp"


namespace SDK
{

// Function InstanceSplineMesh.InstanceSplineMeshComponent.AddSplineInstance
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          StartPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartTangent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        StartScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartRoll                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndTangent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        EndScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndRoll                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          UpDir                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWorldSpace                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInstanceSplineMeshComponent::AddSplineInstance(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector2D& StartScale, float StartRoll, const struct FVector& EndPos, const struct FVector& EndTangent, const struct FVector2D& EndScale, float EndRoll, const struct FVector& UpDir, bool bWorldSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceSplineMeshComponent", "AddSplineInstance");

	Params::InstanceSplineMeshComponent_AddSplineInstance Parms{};

	Parms.StartPos = std::move(StartPos);
	Parms.StartTangent = std::move(StartTangent);
	Parms.StartScale = std::move(StartScale);
	Parms.StartRoll = StartRoll;
	Parms.EndPos = std::move(EndPos);
	Parms.EndTangent = std::move(EndTangent);
	Parms.EndScale = std::move(EndScale);
	Parms.EndRoll = EndRoll;
	Parms.UpDir = std::move(UpDir);
	Parms.bWorldSpace = bWorldSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InstanceSplineMesh.InstanceSplineMeshComponent.CreateCollision
// (Final, Native, Public, BlueprintCallable)

void UInstanceSplineMeshComponent::CreateCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstanceSplineMeshComponent", "CreateCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InstanceSplineMesh.InstanceSplineMeshUtility.ConvertSplineMeshToInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInstanceSplineMeshUtility::ConvertSplineMeshToInstance(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InstanceSplineMeshUtility", "ConvertSplineMeshToInstance");

	Params::InstanceSplineMeshUtility_ConvertSplineMeshToInstance Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

