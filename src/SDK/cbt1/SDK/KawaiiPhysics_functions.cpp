#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "KawaiiPhysics_classes.hpp"
#include "KawaiiPhysics_parameters.hpp"


namespace SDK
{

// Function KawaiiPhysics.KawaiiPhysics_CustomExternalForce.Apply
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FAnimNode_KawaiiPhysics          Node                                                   (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ModifyBoneIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkelComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       BoneTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKawaiiPhysics_CustomExternalForce::Apply(struct FAnimNode_KawaiiPhysics& Node, int32 ModifyBoneIndex, const class USkeletalMeshComponent* SkelComp, const struct FTransform& BoneTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KawaiiPhysics_CustomExternalForce", "Apply");

	Params::KawaiiPhysics_CustomExternalForce_Apply Parms{};

	Parms.Node = std::move(Node);
	Parms.ModifyBoneIndex = ModifyBoneIndex;
	Parms.SkelComp = SkelComp;
	Parms.BoneTransform = std::move(BoneTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Node = std::move(Parms.Node);
}


// Function KawaiiPhysics.KawaiiPhysics_CustomExternalForce.IsDebugEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysics_CustomExternalForce::IsDebugEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KawaiiPhysics_CustomExternalForce", "IsDebugEnabled");

	Params::KawaiiPhysics_CustomExternalForce_IsDebugEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysics_CustomExternalForce.PreApply
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FAnimNode_KawaiiPhysics          Node                                                   (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkelComp                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKawaiiPhysics_CustomExternalForce::PreApply(struct FAnimNode_KawaiiPhysics& Node, const class USkeletalMeshComponent* SkelComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KawaiiPhysics_CustomExternalForce", "PreApply");

	Params::KawaiiPhysics_CustomExternalForce_PreApply Parms{};

	Parms.Node = std::move(Node);
	Parms.SkelComp = SkelComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Node = std::move(Parms.Node);
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.AddExternalForce
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInstancedStruct                 ExternalForce                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// class UObject*                          Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOneShot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::AddExternalForce(const struct FKawaiiPhysicsReference& KawaiiPhysics, struct FInstancedStruct* ExternalForce, class UObject* Owner, bool bIsOneShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "AddExternalForce");

	Params::KawaiiPhysicsLibrary_AddExternalForce Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.Owner = Owner;
	Parms.bIsOneShot = bIsOneShot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExternalForce != nullptr)
		*ExternalForce = std::move(Parms.ExternalForce);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.AddExternalForcesToComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           MeshComp                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInstancedStruct>         ExternalForces                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            FilterTags                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bFilterExactMatch                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOneShot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::AddExternalForcesToComponent(class USkeletalMeshComponent* MeshComp, TArray<struct FInstancedStruct>& ExternalForces, class UObject* Owner, struct FGameplayTagContainer& FilterTags, bool bFilterExactMatch, bool bIsOneShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "AddExternalForcesToComponent");

	Params::KawaiiPhysicsLibrary_AddExternalForcesToComponent Parms{};

	Parms.MeshComp = MeshComp;
	Parms.ExternalForces = std::move(ExternalForces);
	Parms.Owner = Owner;
	Parms.FilterTags = std::move(FilterTags);
	Parms.bFilterExactMatch = bFilterExactMatch;
	Parms.bIsOneShot = bIsOneShot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ExternalForces = std::move(Parms.ExternalForces);
	FilterTags = std::move(Parms.FilterTags);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.AddExternalForceWithExecResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInstancedStruct                 ExternalForce                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// class UObject*                          Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::AddExternalForceWithExecResult(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, struct FInstancedStruct* ExternalForce, class UObject* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "AddExternalForceWithExecResult");

	Params::KawaiiPhysicsLibrary_AddExternalForceWithExecResult Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	if (ExternalForce != nullptr)
		*ExternalForce = std::move(Parms.ExternalForce);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.ConvertToKawaiiPhysics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::ConvertToKawaiiPhysics(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "ConvertToKawaiiPhysics");

	Params::KawaiiPhysicsLibrary_ConvertToKawaiiPhysics Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.ConvertToKawaiiPhysicsPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKawaiiPhysicsLibrary::ConvertToKawaiiPhysicsPure(const struct FAnimNodeReference& Node, struct FKawaiiPhysicsReference* KawaiiPhysics, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "ConvertToKawaiiPhysicsPure");

	Params::KawaiiPhysicsLibrary_ConvertToKawaiiPhysicsPure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (KawaiiPhysics != nullptr)
		*KawaiiPhysics = std::move(Parms.KawaiiPhysics);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetAllowWorldCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetAllowWorldCollision(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetAllowWorldCollision");

	Params::KawaiiPhysicsLibrary_GetAllowWorldCollision Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetDummyBoneLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetDummyBoneLength(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetDummyBoneLength");

	Params::KawaiiPhysicsLibrary_GetDummyBoneLength Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetEnableWind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetEnableWind(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetEnableWind");

	Params::KawaiiPhysicsLibrary_GetEnableWind Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExcludeBoneNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UKawaiiPhysicsLibrary::GetExcludeBoneNames(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExcludeBoneNames");

	Params::KawaiiPhysicsLibrary_GetExcludeBoneNames Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceBoolProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetExternalForceBoolProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceBoolProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceBoolProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceFloatProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetExternalForceFloatProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceFloatProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceFloatProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceIntProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKawaiiPhysicsLibrary::GetExternalForceIntProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceIntProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceIntProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceRotatorProperty
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UKawaiiPhysicsLibrary::GetExternalForceRotatorProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceRotatorProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceRotatorProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceTransformProperty
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UKawaiiPhysicsLibrary::GetExternalForceTransformProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceTransformProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceTransformProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceVectorProperty
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UKawaiiPhysicsLibrary::GetExternalForceVectorProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceVectorProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceVectorProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetExternalForceWildcardProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKawaiiPhysicsLibrary::GetExternalForceWildcardProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetExternalForceWildcardProperty");

	Params::KawaiiPhysicsLibrary_GetExternalForceWildcardProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetGravity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UKawaiiPhysicsLibrary::GetGravity(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetGravity");

	Params::KawaiiPhysicsLibrary_GetGravity Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetLimitsDataAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UKawaiiPhysicsLimitsDataAsset*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKawaiiPhysicsLimitsDataAsset* UKawaiiPhysicsLibrary::GetLimitsDataAsset(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetLimitsDataAsset");

	Params::KawaiiPhysicsLibrary_GetLimitsDataAsset Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetNeedWarmUp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetNeedWarmUp(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetNeedWarmUp");

	Params::KawaiiPhysicsLibrary_GetNeedWarmUp Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetPhysicsSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsSettings           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsSettings UKawaiiPhysicsLibrary::GetPhysicsSettings(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetPhysicsSettings");

	Params::KawaiiPhysicsLibrary_GetPhysicsSettings Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetRootBoneName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UKawaiiPhysicsLibrary::GetRootBoneName(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetRootBoneName");

	Params::KawaiiPhysicsLibrary_GetRootBoneName Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetTeleportDistanceThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetTeleportDistanceThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetTeleportDistanceThreshold");

	Params::KawaiiPhysicsLibrary_GetTeleportDistanceThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetTeleportRotationThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetTeleportRotationThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetTeleportRotationThreshold");

	Params::KawaiiPhysicsLibrary_GetTeleportRotationThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetWindScale
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetWindScale(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetWindScale");

	Params::KawaiiPhysicsLibrary_GetWindScale Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.RemoveExternalForcesFromComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           MeshComp                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            FilterTags                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bFilterExactMatch                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::RemoveExternalForcesFromComponent(class USkeletalMeshComponent* MeshComp, class UObject* Owner, struct FGameplayTagContainer& FilterTags, bool bFilterExactMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "RemoveExternalForcesFromComponent");

	Params::KawaiiPhysicsLibrary_RemoveExternalForcesFromComponent Parms{};

	Parms.MeshComp = MeshComp;
	Parms.Owner = Owner;
	Parms.FilterTags = std::move(FilterTags);
	Parms.bFilterExactMatch = bFilterExactMatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FilterTags = std::move(Parms.FilterTags);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.ResetDynamics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::ResetDynamics(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "ResetDynamics");

	Params::KawaiiPhysicsLibrary_ResetDynamics Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetAllowWorldCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAllowWorldCollision                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetAllowWorldCollision(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool bAllowWorldCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetAllowWorldCollision");

	Params::KawaiiPhysicsLibrary_SetAllowWorldCollision Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.bAllowWorldCollision = bAllowWorldCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetDummyBoneLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DummyBoneLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetDummyBoneLength(const struct FKawaiiPhysicsReference& KawaiiPhysics, float DummyBoneLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetDummyBoneLength");

	Params::KawaiiPhysicsLibrary_SetDummyBoneLength Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.DummyBoneLength = DummyBoneLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetEnableWind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableWind                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetEnableWind(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool bEnableWind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetEnableWind");

	Params::KawaiiPhysicsLibrary_SetEnableWind Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.bEnableWind = bEnableWind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExcludeBoneNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class FName>                     ExcludeBoneNames                                       (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExcludeBoneNames(const struct FKawaiiPhysicsReference& KawaiiPhysics, TArray<class FName>& ExcludeBoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExcludeBoneNames");

	Params::KawaiiPhysicsLibrary_SetExcludeBoneNames Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExcludeBoneNames = std::move(ExcludeBoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ExcludeBoneNames = std::move(Parms.ExcludeBoneNames);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceBoolProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExternalForceBoolProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceBoolProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceBoolProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceFloatProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExternalForceFloatProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceFloatProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceFloatProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceIntProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExternalForceIntProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceIntProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceIntProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceRotatorProperty
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExternalForceRotatorProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceRotatorProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceRotatorProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceTransformProperty
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Value                                                  (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExternalForceTransformProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, const struct FTransform& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceTransformProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceTransformProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceVectorProperty
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetExternalForceVectorProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceVectorProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceVectorProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetExternalForceWildcardProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EKawaiiPhysicsAccessExternalForceResult ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ExternalForceIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PropertyName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKawaiiPhysicsLibrary::SetExternalForceWildcardProperty(EKawaiiPhysicsAccessExternalForceResult* ExecResult, const struct FKawaiiPhysicsReference& KawaiiPhysics, int32 ExternalForceIndex, class FName PropertyName, const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetExternalForceWildcardProperty");

	Params::KawaiiPhysicsLibrary_SetExternalForceWildcardProperty Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.ExternalForceIndex = ExternalForceIndex;
	Parms.PropertyName = PropertyName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetGravity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Gravity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetGravity(const struct FKawaiiPhysicsReference& KawaiiPhysics, const struct FVector& Gravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetGravity");

	Params::KawaiiPhysicsLibrary_SetGravity Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.Gravity = std::move(Gravity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetLimitsDataAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UKawaiiPhysicsLimitsDataAsset*    LimitsDataAsset                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetLimitsDataAsset(const struct FKawaiiPhysicsReference& KawaiiPhysics, class UKawaiiPhysicsLimitsDataAsset* LimitsDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetLimitsDataAsset");

	Params::KawaiiPhysicsLibrary_SetLimitsDataAsset Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.LimitsDataAsset = LimitsDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetNeedWarmUp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bNeedWarmUp                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetNeedWarmUp(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool bNeedWarmUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetNeedWarmUp");

	Params::KawaiiPhysicsLibrary_SetNeedWarmUp Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.bNeedWarmUp = bNeedWarmUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetPhysicsSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsSettings           PhysicsSettings                                        (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetPhysicsSettings(const struct FKawaiiPhysicsReference& KawaiiPhysics, struct FKawaiiPhysicsSettings& PhysicsSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetPhysicsSettings");

	Params::KawaiiPhysicsLibrary_SetPhysicsSettings Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.PhysicsSettings = std::move(PhysicsSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	PhysicsSettings = std::move(Parms.PhysicsSettings);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetRootBoneName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             RootBoneName                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetRootBoneName(const struct FKawaiiPhysicsReference& KawaiiPhysics, class FName& RootBoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetRootBoneName");

	Params::KawaiiPhysicsLibrary_SetRootBoneName Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.RootBoneName = RootBoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	RootBoneName = Parms.RootBoneName;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetTeleportDistanceThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TeleportDistanceThreshold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetTeleportDistanceThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics, float TeleportDistanceThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetTeleportDistanceThreshold");

	Params::KawaiiPhysicsLibrary_SetTeleportDistanceThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.TeleportDistanceThreshold = TeleportDistanceThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetTeleportRotationThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TeleportRotationThreshold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetTeleportRotationThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics, float TeleportRotationThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetTeleportRotationThreshold");

	Params::KawaiiPhysicsLibrary_SetTeleportRotationThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.TeleportRotationThreshold = TeleportRotationThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetWindScale
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   WindScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetWindScale(const struct FKawaiiPhysicsReference& KawaiiPhysics, float WindScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetWindScale");

	Params::KawaiiPhysicsLibrary_SetWindScale Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.WindScale = WindScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

