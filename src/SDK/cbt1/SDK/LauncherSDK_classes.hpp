#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LauncherSDK

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "LauncherSDK_structs.hpp"


namespace SDK
{

// Class LauncherSDK.LauncherSDKSubsystem
// 0x00C0 (0x00F0 - 0x0030)
class ULauncherSDKSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnGameSizeChanged;                                 // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOrientationChanged;                              // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameForceMouseShowStatusChanged;                 // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1361[0x90];                                    // 0x0060(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlinkTaskbar(int32 Sec);
	void CancelBlinkTaskbar();
	void ChangeSize(int32 Width, int32 Height, bool bFullScreen, bool bExclusive);
	void CloseIMM();
	EGameOrientation GetCurrentOrientation();
	class FString GetMediaId();
	void GetSafeZoneInfo(TDelegate<void(int32 Code, const class FString& Data)> Handler);
	class FString GetUserDataPath(EUserPathType PathType);
	bool HasPartner();
	bool HasPopupUI();
	void IMECustomMsgToCloudTerminal(int32 X, int32 Y, int32 Width, int32 Height, const class FString& Data, TDelegate<void(int32 Code, const class FString& Data)> Handler);
	void IMEWinMsgToCloudTerminal(int32 X, int32 Y, int32 Width, int32 Height);
	int64 Init(const class FString& AppID, const class FString& AppKey);
	bool IsCloudGame();
	bool IsFullscreen();
	bool IsStartFromLauncher();
	int64 Quit();
	void ReInstallGame(bool bShowWarning);
	int64 Restart(bool bForUpdateGame);
	void RestoreIMM();
	void SetOrientation(EGameOrientation Orientation);
	void ShowFullScreen(bool bExclusive);
	void ShowNormal();
	int64 StartPlatform(const class FString& Cmd);
	bool TaskbarIsBlinking();
	void TrackEvent(const class FString& EventName, const TMap<class FString, class FString>& Info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LauncherSDKSubsystem">();
	}
	static class ULauncherSDKSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULauncherSDKSubsystem>();
	}
};

}

