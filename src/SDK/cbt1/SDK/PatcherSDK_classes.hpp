#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PatcherSDK

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "PatcherSDK_structs.hpp"


namespace SDK
{

// Class PatcherSDK.PatcherSDKSubsystem
// 0x00F0 (0x0120 - 0x0030)
class UPatcherSDKSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             VersionCheckDelegate;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreDownloadDelegate;                               // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DownloadDelegate;                                  // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FixResourceDelegate;                               // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StateStartDelegate;                                // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StateEndDelegate;                                  // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             UpdateFinishDelegate;                              // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             FixResourceFileStartDelegate;                      // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ClearResCompletedDelegate;                         // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LocalResCheckProgressDelegate;                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             DownloadResCheckProgressDelegate;                  // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LowSpeedNotifyDelegate;                            // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreReleaseCheckDelegate;                           // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreDownloadWithTagsDelegate;                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3247[0x10];                                    // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPlayAssetsProgressDelegate__DelegateSignature(int32 TotalPackage, int32 CurrentPackage, int64 TotalBytes, int64 CurrentBytes);
	void AvailableVersionsDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& Content);
	void CancelUpdate();
	int32 CheckAndDoUpdateBaseResource(const class FString& Tags);
	int32 CheckBaseResource(const class FString& Tags, const struct FPatcherBaseResCheckStatusCallback& Callback);
	void CheckResultDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& Content);
	void Clear();
	void ClearResCompletedDelegate__DelegateSignature(int32 Result, const class FString& Desc);
	int32 DoUpdateBaseResource(bool ClearResource, const class FString& Tags);
	void DownloadDelegate__DelegateSignature(int64 TotalSize, float Progress, int64 Speed);
	void DownloadResCheckProgressDelegate__DelegateSignature(int32 TotalFileCount, int32 CheckedFileCount, int64 TotalBytes, int64 CheckedBytes, const class FString& CurrentResName, int64 CurrentFileSize, int64 CurrentCheckedSize);
	int32 EnableBackgroundtask(bool bEnable);
	void EnablePushNotify(bool bEnable);
	void FixResourceDelegate__DelegateSignature(int32 Totalcount, int32 Remaincount, EPatcherFileOper PatcherFileOper, const class FString& CurrentFixedFile);
	void FixResourceFileStartDelegate__DelegateSignature(int64 TotalResouceByteSize, int64 TotalFixedResourceSize, int64 CurrentResourceTotalSize, EPatcherFileOper PatcherFileOper, const class FString& CurrentFile);
	class FString GetCDNList();
	class FString GetConfigByKey(const class FString& Key);
	int64 GetDeviceFreeSpace();
	class FString GetLocalAppversion();
	class FString GetLocalResversion();
	class FString GetPatcherVersion();
	int64 GetPlayAssetsSize();
	class FString GetServerListFile();
	int32 Init(const class FString& ConfigPath, int32 SDKLogLevel, const struct FPatcherSDKPathInfo& PathInfo, const class FString& DeviceID, const class FString& MediaID);
	int32 InitWithJsonContent(const class FString& ConfigJsonContent, int32 SDKLogLevel, const struct FPatcherSDKPathInfo& PathInfo, const class FString& DeviceID, const class FString& MediaID);
	int32 IsBackgroundtaskEnabled();
	void LocalResCheckProgressDelegate__DelegateSignature(int32 TotalFileCount, int32 CheckedFileCount, int64 TotalBytes, int64 CheckedBytes, const class FString& CurrentResName, int64 CurrentFileSize, int64 CurrentCheckedSize);
	void LowSpeedNotifyDelegate__DelegateSignature(const class FString& CurrentCDN, int64 CurrentSpeedBytesPerSecond, const class FString& Reverse);
	void PreDownloadDelegate__DelegateSignature(int64 WillDownloadBytes, int64 UpdateNeedSpaceBytes, int64 FreeDiskspaceBytes);
	void PreDownloadWithTagsDelegate__DelegateSignature(int64 BaseBytes, int64 WillDownloadBaseBytes, int64 UpdateNeedSpaceBaseBytes, int64 AllBytes, int64 WillDownloadAllBytes, int64 UpdateNeedSpaceAllBytes, int64 FreeDiskspaceBytes);
	int32 PreReleaseCancel();
	void PreReleaseCheckDelegate__DelegateSignature(bool bHasPreRelease, const class FString& PreReleaseBranch, const class FString& PreReleaseResVersion);
	int32 PreReleaseCheckStatus(const struct FPatcherPreReleaseCheckStatusCallback& Callback);
	int32 PreReleaseRequest(const struct FPreReleaseRequestCallback& Callback);
	void RefreshConfigDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& Content);
	int32 RefreshConfigWithCallback(TDelegate<void(int32 Code, const class FString& Desc, const class FString& Content)> Callback);
	void RefreshServerListDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& FilePath);
	void RefreshServerListWithCallback(bool bAsync, TDelegate<void(int32 Code, const class FString& Desc, const class FString& FilePath)> Callback);
	void RefreshServerlistWithURL(bool bAsync, const class FString& ServelistURL, TDelegate<void(int32 Code, const class FString& Desc, const class FString& FilePath)> Callback);
	void RequestAvailableVersions(TDelegate<void(int32 Code, const class FString& Desc, const class FString& Content)> Callback);
	int32 RequestCancelDownload(const class FString& URL, const class FString& LocalDir, const class FString& Param_Name);
	void RequestCheckAppInfoDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& Content);
	int32 RequestCheckAppNeedUpdate(const class FString& ChannelId, const class FString& MediaID, TDelegate<void(int32 Code, const class FString& Desc, const class FString& Content)> Callback);
	int32 RequestDownloadFile(const class FString& URL, const class FString& LocalDir, const class FString& Param_Name, const struct FPatcherRequestDownloadFileCallback& Callback);
	int32 RequestTagVersioninfo(const class FString& TagName, TDelegate<void(int32 Code, const class FString& Desc, const class FString& Content)> Callback);
	void RequestTagVersionInfoDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& Content);
	int32 RequestVersioninfo(TDelegate<void(int32 Code, const class FString& Desc, const class FString& Content)> Callback);
	void RequestVersionInfoDelegate__DelegateSignature(int32 Code, const class FString& Desc, const class FString& Content);
	int32 ResourceCheckResult(bool Async, const class FString& Dirs, const class FString& Filters, TDelegate<void(int32 Code, const class FString& Desc, const class FString& Content)> Callback);
	int32 RunCallbacks();
	int32 SetCDN(const class FString& URL);
	int32 SetCheckDirs(const class FString& Dirs);
	int32 SetInitialResDirMapping(const class FString& InitialDir, const class FString& ResDir, const class FString& CustomVersion);
	int32 SetMaxSpeed(int64 KBPerSecond);
	void SetNotifyContent(const class FString& JsonContent);
	int32 SetVersion(const class FString& Version, const class FString& Resverse);
	int32 SetWriteLimit(int64 bytesPerSecond);
	int32 SetWriteLimitByTime(int64 WriteTime, int64 WaitTime);
	void StateEndDelegate__DelegateSignature(EPatcherState PatcherState);
	void StateStartDelegate__DelegateSignature(EPatcherState PatcherState);
	int32 TagCancelUpdate(int64 Task);
	int32 TagCheckResource(const class FString& Tags, const struct FPatcherTagCheckResourceCallback& Callback);
	int32 TagConfirmUpdate(int64 Task, bool bDoNext);
	int64 TagCreateUpdateTask(const class FString& Tag, const struct FPatcherTagResourceUpdateCallback& Callback, bool bAutoStart, int32 MaxThreads, int64 MaxBytesPerSecond);
	int32 TagDestroyUpdateTask(int64 Task);
	void TagGetTagList(TDelegate<void(int32 Code, const class FString& Desc, TArray<struct FPatcherResourceInfo>& ResourceInfoArray)> Callback);
	class FString TagGetTagName(int64 Task);
	int64 TagGetTaskByTagName(const class FString& Tag);
	void TagGetTaskList(TDelegate<void(int32 Code, const class FString& Desc, TArray<struct FPatcherResourceInfo>& ResourceInfoArray)> Callback);
	int32 TagStartUpdate(int64 Task);
	void Uninit();
	void UpdateFinishDelegate__DelegateSignature(EPatcherErr PatcherErr);
	void VersionCheckDelegate__DelegateSignature(EPatcherVerCheck PatcherVerCheck, const struct FVersionInfo& VersionInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PatcherSDKSubsystem">();
	}
	static class UPatcherSDKSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPatcherSDKSubsystem>();
	}
};

}

