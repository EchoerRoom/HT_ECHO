#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PointCloud

#include "Basic.hpp"

#include "PointCloud_classes.hpp"
#include "PointCloud_parameters.hpp"


namespace SDK
{

// Function PointCloud.PointCloud.LoadFromPoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FPointCloudPoint>         InPoints                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::LoadFromPoints(const TArray<struct FPointCloudPoint>& InPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "LoadFromPoints");

	Params::PointCloud_LoadFromPoints Parms{};

	Parms.InPoints = std::move(InPoints);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.MakeView
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudView*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPointCloudView* UPointCloud::MakeView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "MakeView");

	Params::PointCloud_MakeView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.Reimport
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             ReimportBounds                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::Reimport(const struct FBox& ReimportBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "Reimport");

	Params::PointCloud_Reimport Parms{};

	Parms.ReimportBounds = std::move(ReimportBounds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.ReplacePoints
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             ReimportBounds                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::ReplacePoints(const class FString& Filename, const struct FBox& ReimportBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "ReplacePoints");

	Params::PointCloud_ReplacePoints Parms{};

	Parms.Filename = std::move(Filename);
	Parms.ReimportBounds = std::move(ReimportBounds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.SaveToDisk
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::SaveToDisk(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "SaveToDisk");

	Params::PointCloud_SaveToDisk Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.StartLogging
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::StartLogging(const class FString& InFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "StartLogging");

	Params::PointCloud_StartLogging Parms{};

	Parms.InFilename = std::move(InFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.StopLogging
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::StopLogging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "StopLogging");

	Params::PointCloud_StopLogging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.GetBounds
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UPointCloud::GetBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "GetBounds");

	Params::PointCloud_GetBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.GetCount
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPointCloud::GetCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "GetCount");

	Params::PointCloud_GetCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.GetDefaultAttributes
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UPointCloud::GetDefaultAttributes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "GetDefaultAttributes");

	Params::PointCloud_GetDefaultAttributes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.GetLoadedFiles
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UPointCloud::GetLoadedFiles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "GetLoadedFiles");

	Params::PointCloud_GetLoadedFiles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.GetMetadataAttributes
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSet<class FString>                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class FString> UPointCloud::GetMetadataAttributes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "GetMetadataAttributes");

	Params::PointCloud_GetMetadataAttributes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.HasDefaultAttribute
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::HasDefaultAttribute(const class FString& Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "HasDefaultAttribute");

	Params::PointCloud_HasDefaultAttribute Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.HasMetaDataAttribute
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::HasMetaDataAttribute(const class FString& Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "HasMetaDataAttribute");

	Params::PointCloud_HasMetaDataAttribute Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloud.LoggingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloud::LoggingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloud", "LoggingEnabled");

	Params::PointCloud_LoggingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceMapping.ClearManagedActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClearDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USliceAndDiceMapping::ClearManagedActors(bool bClearDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceMapping", "ClearManagedActors");

	Params::SliceAndDiceMapping_ClearManagedActors Parms{};

	Parms.bClearDisabled = bClearDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.SliceAndDiceManager.CreateSliceAndDiceManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASliceAndDiceManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASliceAndDiceManager* ASliceAndDiceManager::CreateSliceAndDiceManager(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SliceAndDiceManager", "CreateSliceAndDiceManager");

	Params::SliceAndDiceManager_CreateSliceAndDiceManager Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.GetSliceAndDiceManagers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASliceAndDiceManager*>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ASliceAndDiceManager*> ASliceAndDiceManager::GetSliceAndDiceManagers(class UWorld* InWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SliceAndDiceManager", "GetSliceAndDiceManagers");

	Params::SliceAndDiceManager_GetSliceAndDiceManagers Parms{};

	Parms.InWorld = InWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.GetSliceAndDiceManagersInLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           InLevel                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASliceAndDiceManager*>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ASliceAndDiceManager*> ASliceAndDiceManager::GetSliceAndDiceManagersInLevel(class ULevel* InLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SliceAndDiceManager", "GetSliceAndDiceManagersInLevel");

	Params::SliceAndDiceManager_GetSliceAndDiceManagersInLevel Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.AddNewMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USliceAndDiceMapping*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USliceAndDiceMapping* ASliceAndDiceManager::AddNewMapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "AddNewMapping");

	Params::SliceAndDiceManager_AddNewMapping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.DeleteAllManagedActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCleanDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::DeleteAllManagedActors(bool bCleanDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "DeleteAllManagedActors");

	Params::SliceAndDiceManager_DeleteAllManagedActors Parms{};

	Parms.bCleanDisabled = bCleanDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.DeleteManagedActorsFromMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USliceAndDiceMapping*             InMapping                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCleanDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::DeleteManagedActorsFromMapping(class USliceAndDiceMapping* InMapping, bool bCleanDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "DeleteManagedActorsFromMapping");

	Params::SliceAndDiceManager_DeleteManagedActorsFromMapping Parms{};

	Parms.InMapping = InMapping;
	Parms.bCleanDisabled = bCleanDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.DeleteManagedActorsFromMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USliceAndDiceMapping*>     InMappings                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bCleanDisabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::DeleteManagedActorsFromMappings(const TArray<class USliceAndDiceMapping*>& InMappings, bool bCleanDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "DeleteManagedActorsFromMappings");

	Params::SliceAndDiceManager_DeleteManagedActorsFromMappings Parms{};

	Parms.InMappings = std::move(InMappings);
	Parms.bCleanDisabled = bCleanDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.FindMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloud*                      InPointCloud                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudSliceAndDiceRuleSet*   InRuleSet                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USliceAndDiceMapping*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USliceAndDiceMapping* ASliceAndDiceManager::FindMapping(class UPointCloud* InPointCloud, class UPointCloudSliceAndDiceRuleSet* InRuleSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "FindMapping");

	Params::SliceAndDiceManager_FindMapping Parms{};

	Parms.InPointCloud = InPointCloud;
	Parms.InRuleSet = InRuleSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.FindOrAddMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloud*                      InPointCloud                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudSliceAndDiceRuleSet*   InRuleSet                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USliceAndDiceMapping*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USliceAndDiceMapping* ASliceAndDiceManager::FindOrAddMapping(class UPointCloud* InPointCloud, class UPointCloudSliceAndDiceRuleSet* InRuleSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "FindOrAddMapping");

	Params::SliceAndDiceManager_FindOrAddMapping Parms{};

	Parms.InPointCloud = InPointCloud;
	Parms.InRuleSet = InRuleSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.MoveMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USliceAndDiceMapping*             InMapping                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASliceAndDiceManager*             InTargetManager                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::MoveMapping(class USliceAndDiceMapping* InMapping, class ASliceAndDiceManager* InTargetManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "MoveMapping");

	Params::SliceAndDiceManager_MoveMapping Parms{};

	Parms.InMapping = InMapping;
	Parms.InTargetManager = InTargetManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.MoveMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USliceAndDiceMapping*>     InMapping                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class ASliceAndDiceManager*             InTargetManager                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::MoveMappings(const TArray<class USliceAndDiceMapping*>& InMapping, class ASliceAndDiceManager* InTargetManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "MoveMappings");

	Params::SliceAndDiceManager_MoveMappings Parms{};

	Parms.InMapping = std::move(InMapping);
	Parms.InTargetManager = InTargetManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.ReloadAllPointClouds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::ReloadAllPointClouds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "ReloadAllPointClouds");

	Params::SliceAndDiceManager_ReloadAllPointClouds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.ReloadPointCloudsOnMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USliceAndDiceMapping*>     SelectedMappings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::ReloadPointCloudsOnMappings(const TArray<class USliceAndDiceMapping*>& SelectedMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "ReloadPointCloudsOnMappings");

	Params::SliceAndDiceManager_ReloadPointCloudsOnMappings Parms{};

	Parms.SelectedMappings = std::move(SelectedMappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.RemoveMapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USliceAndDiceMapping*             InMapping                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeleteManagedActors                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::RemoveMapping(class USliceAndDiceMapping* InMapping, bool bDeleteManagedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "RemoveMapping");

	Params::SliceAndDiceManager_RemoveMapping Parms{};

	Parms.InMapping = InMapping;
	Parms.bDeleteManagedActors = bDeleteManagedActors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.RunReport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPointCloudReportLevel                  Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASliceAndDiceManager::RunReport(EPointCloudReportLevel Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "RunReport");

	Params::SliceAndDiceManager_RunReport Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.RunReportOnMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USliceAndDiceMapping*>     SelectedMappings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPointCloudReportLevel                  Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASliceAndDiceManager::RunReportOnMappings(const TArray<class USliceAndDiceMapping*>& SelectedMappings, EPointCloudReportLevel Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "RunReportOnMappings");

	Params::SliceAndDiceManager_RunReportOnMappings Parms{};

	Parms.SelectedMappings = std::move(SelectedMappings);
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.RunRules
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::RunRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "RunRules");

	Params::SliceAndDiceManager_RunRules Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.RunRulesOnMappings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USliceAndDiceMapping*>     SelectedMappings                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASliceAndDiceManager::RunRulesOnMappings(const TArray<class USliceAndDiceMapping*>& SelectedMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "RunRulesOnMappings");

	Params::SliceAndDiceManager_RunRulesOnMappings Parms{};

	Parms.SelectedMappings = std::move(SelectedMappings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.SliceAndDiceManager.SetLogging
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInLoggingEnabled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InLogPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASliceAndDiceManager::SetLogging(bool bInLoggingEnabled, const class FString& InLogPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "SetLogging");

	Params::SliceAndDiceManager_SetLogging Parms{};

	Parms.bInLoggingEnabled = bInLoggingEnabled;
	Parms.InLogPath = std::move(InLogPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.SliceAndDiceManager.NumMappings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASliceAndDiceManager::NumMappings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SliceAndDiceManager", "NumMappings");

	Params::SliceAndDiceManager_NumMappings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.AddRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudRule*                  InRule                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  InParent                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSlotIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloudSliceAndDiceRuleSet::AddRule(class UPointCloudRule* InRule, class UPointCloudRule* InParent, int32 InSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "AddRule");

	Params::PointCloudSliceAndDiceRuleSet_AddRule Parms{};

	Parms.InRule = InRule;
	Parms.InParent = InParent;
	Parms.InSlotIndex = InSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.CopyRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudRule*                  InRule                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  InTargetParent                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTargetSlotIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloudSliceAndDiceRuleSet::CopyRule(class UPointCloudRule* InRule, class UPointCloudRule* InTargetParent, int32 InTargetSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "CopyRule");

	Params::PointCloudSliceAndDiceRuleSet_CopyRule Parms{};

	Parms.InRule = InRule;
	Parms.InTargetParent = InTargetParent;
	Parms.InTargetSlotIndex = InTargetSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.CreateRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RuleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  ParentRule                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPointCloudRule* UPointCloudSliceAndDiceRuleSet::CreateRule(const class FString& RuleName, class UPointCloudRule* ParentRule, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "CreateRule");

	Params::PointCloudSliceAndDiceRuleSet_CreateRule Parms{};

	Parms.RuleName = std::move(RuleName);
	Parms.ParentRule = ParentRule;
	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.GetRules
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class UPointCloudRule*>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UPointCloudRule*> UPointCloudSliceAndDiceRuleSet::GetRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "GetRules");

	Params::PointCloudSliceAndDiceRuleSet_GetRules Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.MoveRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudRule*                  InRuleParent                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InRuleSlotIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  InTargetParent                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTargetSlotIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloudSliceAndDiceRuleSet::MoveRule(class UPointCloudRule* InRuleParent, int32 InRuleSlotIndex, class UPointCloudRule* InTargetParent, int32 InTargetSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "MoveRule");

	Params::PointCloudSliceAndDiceRuleSet_MoveRule Parms{};

	Parms.InRuleParent = InRuleParent;
	Parms.InRuleSlotIndex = InRuleSlotIndex;
	Parms.InTargetParent = InTargetParent;
	Parms.InTargetSlotIndex = InTargetSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.RemoveRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudRule*                  InParent                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSlotIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPointCloudRule* UPointCloudSliceAndDiceRuleSet::RemoveRule(class UPointCloudRule* InParent, int32 InSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "RemoveRule");

	Params::PointCloudSliceAndDiceRuleSet_RemoveRule Parms{};

	Parms.InParent = InParent;
	Parms.InSlotIndex = InSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudSliceAndDiceRuleSet.SwapRules
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudRule*                  InRuleParent                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InRuleSlotIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPointCloudRule*                  InTargetParent                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTargetSlotIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPointCloudSliceAndDiceRuleSet::SwapRules(class UPointCloudRule* InRuleParent, int32 InRuleSlotIndex, class UPointCloudRule* InTargetParent, int32 InTargetSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudSliceAndDiceRuleSet", "SwapRules");

	Params::PointCloudSliceAndDiceRuleSet_SwapRules Parms{};

	Parms.InRuleParent = InRuleParent;
	Parms.InRuleSlotIndex = InRuleSlotIndex;
	Parms.InTargetParent = InTargetParent;
	Parms.InTargetSlotIndex = InTargetSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.FilterOnBoundingBox
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             BoundingBox                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bInvertSelection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnBoundingBox(const struct FBox& BoundingBox, bool bInvertSelection, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnBoundingBox");

	Params::PointCloudView_FilterOnBoundingBox Parms{};

	Parms.BoundingBox = std::move(BoundingBox);
	Parms.bInvertSelection = bInvertSelection;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnBoundingSphere
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Center                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnBoundingSphere(const struct FVector& Center, float Radius, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnBoundingSphere");

	Params::PointCloudView_FilterOnBoundingSphere Parms{};

	Parms.Center = std::move(Center);
	Parms.Radius = Radius;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnIndex(int32 Param_Index, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnIndex");

	Params::PointCloudView_FilterOnIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnMetadata
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MetaData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnMetadata(const class FString& MetaData, const class FString& Value, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnMetadata");

	Params::PointCloudView_FilterOnMetadata Parms{};

	Parms.MetaData = std::move(MetaData);
	Parms.Value = std::move(Value);
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnMetadataPattern
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MetaData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Pattern                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnMetadataPattern(const class FString& MetaData, const class FString& Pattern, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnMetadataPattern");

	Params::PointCloudView_FilterOnMetadataPattern Parms{};

	Parms.MetaData = std::move(MetaData);
	Parms.Pattern = std::move(Pattern);
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnOrientedBoundingBox
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       InOBB                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInvertSelection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnOrientedBoundingBox(const struct FTransform& InOBB, bool bInvertSelection, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnOrientedBoundingBox");

	Params::PointCloudView_FilterOnOrientedBoundingBox Parms{};

	Parms.InOBB = std::move(InOBB);
	Parms.bInvertSelection = bInvertSelection;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnPointExpression
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Expression                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnPointExpression(const class FString& Expression, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnPointExpression");

	Params::PointCloudView_FilterOnPointExpression Parms{};

	Parms.Expression = std::move(Expression);
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnRange(int32 StartIndex, int32 EndIndex, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnRange");

	Params::PointCloudView_FilterOnRange Parms{};

	Parms.StartIndex = StartIndex;
	Parms.EndIndex = EndIndex;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.FilterOnTile
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             QueryGridBounds                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   InNumTilesX                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumTilesY                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumTilesZ                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTileX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTileY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTileZ                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInvertSelection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFilterMode                             Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointCloudView::FilterOnTile(const struct FBox& QueryGridBounds, int32 InNumTilesX, int32 InNumTilesY, int32 InNumTilesZ, int32 InTileX, int32 InTileY, int32 InTileZ, bool bInvertSelection, EFilterMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "FilterOnTile");

	Params::PointCloudView_FilterOnTile Parms{};

	Parms.QueryGridBounds = std::move(QueryGridBounds);
	Parms.InNumTilesX = InNumTilesX;
	Parms.InNumTilesY = InNumTilesY;
	Parms.InNumTilesZ = InNumTilesZ;
	Parms.InTileX = InTileX;
	Parms.InTileY = InTileY;
	Parms.InTileZ = InTileZ;
	Parms.bInvertSelection = bInvertSelection;
	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointCloud.PointCloudView.MakeChildView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPointCloudView*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPointCloudView* UPointCloudView::MakeChildView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "MakeChildView");

	Params::PointCloudView_MakeChildView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.CountResultsInBox
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPointCloudView::CountResultsInBox(const struct FBox& Box) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "CountResultsInBox");

	Params::PointCloudView_CountResultsInBox Parms{};

	Parms.Box = std::move(Box);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPointCloudView::GetCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetCount");

	Params::PointCloudView_GetCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetHash
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPointCloudView::GetHash() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetHash");

	Params::PointCloudView_GetHash Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetIndexes
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           OutIds                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPointCloudView::GetIndexes(TArray<int32>* OutIds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetIndexes");

	Params::PointCloudView_GetIndexes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIds != nullptr)
		*OutIds = std::move(Parms.OutIds);

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetMetadata
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PointId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> UPointCloudView::GetMetadata(int32 PointId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetMetadata");

	Params::PointCloudView_GetMetadata Parms{};

	Parms.PointId = PointId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetMetadataValues
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<int32, class FString>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, class FString> UPointCloudView::GetMetadataValues(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetMetadataValues");

	Params::PointCloudView_GetMetadataValues Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetMetadataValuesArrayAsFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UPointCloudView::GetMetadataValuesArrayAsFloat(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetMetadataValuesArrayAsFloat");

	Params::PointCloudView_GetMetadataValuesArrayAsFloat Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetMetadataValuesArrayAsInt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UPointCloudView::GetMetadataValuesArrayAsInt(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetMetadataValuesArrayAsInt");

	Params::PointCloudView_GetMetadataValuesArrayAsInt Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetPointCloud
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPointCloud*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPointCloud* UPointCloudView::GetPointCloud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetPointCloud");

	Params::PointCloudView_GetPointCloud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetResultsBoundingBox
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UPointCloudView::GetResultsBoundingBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetResultsBoundingBox");

	Params::PointCloudView_GetResultsBoundingBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetTransforms
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> UPointCloudView::GetTransforms() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetTransforms");

	Params::PointCloudView_GetTransforms Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetTransformsAndIds
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FTransform>               OutTransforms                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           OutIds                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPointCloudView::GetTransformsAndIds(TArray<struct FTransform>* OutTransforms, TArray<int32>* OutIds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetTransformsAndIds");

	Params::PointCloudView_GetTransformsAndIds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransforms != nullptr)
		*OutTransforms = std::move(Parms.OutTransforms);

	if (OutIds != nullptr)
		*OutIds = std::move(Parms.OutIds);

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetUniqueMetadataValues
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UPointCloudView::GetUniqueMetadataValues(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetUniqueMetadataValues");

	Params::PointCloudView_GetUniqueMetadataValues Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PointCloud.PointCloudView.GetUniqueMetadataValuesAndCounts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, int32>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, int32> UPointCloudView::GetUniqueMetadataValuesAndCounts(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointCloudView", "GetUniqueMetadataValuesAndCounts");

	Params::PointCloudView_GetUniqueMetadataValuesAndCounts Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

