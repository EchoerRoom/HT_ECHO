#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnappyRoad

#include "Basic.hpp"

#include "SnappyRoad_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "StructUtils_structs.hpp"
#include "ZoneGraph_classes.hpp"


namespace SDK
{

// Class SnappyRoad.ComponentPoolManager
// 0x0030 (0x00D8 - 0x00A8)
class UComponentPoolManager final : public UActorComponent
{
public:
	uint8                                         Pad_1FD8[0x18];                                    // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                UsedComponentPool;                                 // 0x00C0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FD9[0x8];                                     // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CleanPool();
	class UActorComponent* GetComponentFromPool();
	TArray<class UActorComponent*> GetUsedComponentPool();
	void InitializePool(TSubclassOf<class UActorComponent> ComponentClass, class AActor* Param_Outer);
	void ReturnAllComponentToPool();
	void ReturnComponentToPool(class UActorComponent* Component);
	void ShrinkFreePool();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComponentPoolManager">();
	}
	static class UComponentPoolManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComponentPoolManager>();
	}
};

// Class SnappyRoad.CustomZoneGraphMethod
// 0x0000 (0x0028 - 0x0028)
class UCustomZoneGraphMethod : public UAssetUserData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomZoneGraphMethod">();
	}
	static class UCustomZoneGraphMethod* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomZoneGraphMethod>();
	}
};

// Class SnappyRoad.PedestrianCrossingZoneGraph
// 0x0118 (0x0140 - 0x0028)
class UPedestrianCrossingZoneGraph final : public UCustomZoneGraphMethod
{
public:
	struct FPedestrianCrossingTrunkStaright       UpConfig;                                          // 0x0028(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPedestrianCrossingTrunkStaright       ButtonConfig;                                      // 0x0044(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPedestrianCrossingSideIntersection    LeftConfig;                                        // 0x0060(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPedestrianCrossingSideIntersection    RightConfig;                                       // 0x00D0(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PedestrianCrossingZoneGraph">();
	}
	static class UPedestrianCrossingZoneGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPedestrianCrossingZoneGraph>();
	}
};

// Class SnappyRoad.HTAssetUserData_SnappyRoad
// 0x0010 (0x0038 - 0x0028)
class UHTAssetUserData_SnappyRoad final : public UAssetUserData
{
public:
	TArray<class FName>                           Tags;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HTAssetUserData_SnappyRoad">();
	}
	static class UHTAssetUserData_SnappyRoad* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHTAssetUserData_SnappyRoad>();
	}
};

// Class SnappyRoad.SnappyRoadComponent
// 0x0000 (0x00A8 - 0x00A8)
class USnappyRoadComponent : public UActorComponent
{
public:
	void Excute();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnappyRoadComponent">();
	}
	static class USnappyRoadComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnappyRoadComponent>();
	}
};

// Class SnappyRoad.RoadFanceComponent
// 0x0178 (0x0220 - 0x00A8)
class URoadFanceComponent final : public USnappyRoadComponent
{
public:
	struct FSplineCurves                          SplineCurves;                                      // 0x00A8(0x0070)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDA[0x8];                                     // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SplineTransform;                                   // 0x0120(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultUpVector;                                   // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReparamStepsPerSegment;                            // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClosedLoop;                                       // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDB[0x3];                                     // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       LocalBounds;                                       // 0x01A0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       Bounds;                                            // 0x01D8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStationaryEndpoints;                              // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopPositionOverride;                             // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDC[0x2];                                     // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopPosition;                                      // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDD[0x8];                                     // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(struct FRoadFanceStruct& FanceStruct, class USplineComponent* InSpline);
	void OffsetSpline(const struct FRoadFanceStruct& FanceStruct);
	void SetSplinePoints(struct FRoadFanceStruct& FanceStruct, const TArray<struct FVector>& Points, ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void UpdateSpline(struct FRoadFanceStruct* FanceStruct);

	struct FVector GetLocationAtSplineInputKey(const struct FRoadFanceStruct& FanceStruct, float InKey, ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetScaleAtSplineInputKey(const struct FRoadFanceStruct& FanceStruct, float InKey) const;
	float GetSplineLength(const struct FRoadFanceStruct& FanceStruct) const;
	struct FTransform GetTransformAtDistanceAlongSpline(const struct FRoadFanceStruct& FanceStruct, float Distance, ESplineCoordinateSpace CoordinateSpace, bool bUseScale) const;
	struct FTransform GetTransformAtSplineInputKey(const struct FRoadFanceStruct& FanceStruct, float InKey, ESplineCoordinateSpace CoordinateSpace, bool bUseScale) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RoadFanceComponent">();
	}
	static class URoadFanceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URoadFanceComponent>();
	}
};

// Class SnappyRoad.RoadNetworkUtility
// 0x0000 (0x0028 - 0x0028)
class URoadNetworkUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool GetCrosswalkMiddleIntersectionPoints(struct FZoneShapePointInfo* PointInfo1, struct FZoneShapePointInfo* PointInfo2, const struct FVector& MiddleIntersectionPosition, const struct FRotator& MiddleIntersectionRotator, const struct FZoneLaneProfileRef& MiddleProfileRef, TArray<struct FZoneShapePointInfo>* OutPointsInfo);
	static void GetIntersectionConfig(const class UStaticMesh* Mesh, TArray<struct FIntersectionConfig>* OutConfigs);
	static struct FIntersectionConfig GetIntersectionConfigByDirection(const TArray<struct FIntersectionConfig>& IntersectionConfig, ERoadIntersectionDirection Direction, bool* Succeful);
	static bool GetIntersectionPoint(const struct FVector& Point1, const struct FVector& Dir1, const struct FVector& Point2, const struct FVector& Dir2, struct FVector* IntersectionPoint);
	static void GetIntersectionTransform(const class UStaticMesh* Mesh, TArray<struct FTransform>* OutTransform);
	static ERoadIntersectionDirection GetInverstDirection(ERoadIntersectionDirection SourceDir);
	static struct FZoneLaneProfileRef GetLaneProfileRefByName(class FName LaneName, bool* Succeful);
	static float GetLanesTotalWidthByProfileRef(const struct FZoneLaneProfileRef& ProfileRef);
	static struct FVector GetMidpointBetweenTwoPoints(const struct FVector& Point1, const struct FVector& Point2);
	static ERoadIntersectionDirection GetNextDirection(ERoadIntersectionDirection SourceDir);
	static bool GetSideRoadIntersectionPointInfo(const struct FIntersectionConfig& SocketConfig1, const struct FIntersectionConfig& SocketConfig2, const struct FVector& SideRoadOffsetAlongTrunkLane, const struct FVector& CrosswalkLinkOffset, TArray<struct FZoneShapePointInfo>* OutPointsInfo);
	static TArray<class FName> GetSocketsName(const class UStaticMesh* StaticMesh);
	static bool GetStraightConfig(const class UStaticMesh* Mesh, struct FStraightConfig* OutConfigs);
	static void GetStraightTransform(const class UStaticMesh* Mesh, TArray<struct FTransform>* OutTransform);
	static void GetTrafficLightInfo(const TArray<struct FIntersectionConfig>& Configs, const class UTrafficlightConfigDataAsset* TrafficTypeAsset, TArray<struct FTrafficLightInfo>* OutPoints);
	static void GetTrunkIntersectionPointInfo(const TArray<struct FIntersectionConfig>& SocketConfigs, TArray<struct FZoneShapePointInfo>* OutPointsInfo);
	static void SetIntersectionConfig(class UStaticMesh* Mesh, TArray<struct FIntersectionConfig>* Configs);
	static void SetStraightConfig(class UStaticMesh* Mesh, TArray<struct FStraightConfig>* Configs);

	void GetTrunkIntersectionSocketPoints(const TArray<struct FIntersectionConfig>& Configs, TArray<struct FSocketPoint>* OutPoints);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RoadNetworkUtility">();
	}
	static class URoadNetworkUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<URoadNetworkUtility>();
	}
};

// Class SnappyRoad.SnappyRoad
// 0x0028 (0x02C8 - 0x02A0)
class ASnappyRoad final : public AActor
{
public:
	TArray<struct FInstancedStruct>               InstancedPCGGraph;                                 // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSRCStruct>                     InstancedSRC;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ProxyMeshComponent;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddExtraMesh(class USplineComponent* Spline, bool MeshExtraEnable, const TArray<struct FMeshExtra>& MeshExtra, float YScale, bool UseRoll);
	class USnappyRoadComponent* AddInstancedSRC(TSubclassOf<class USnappyRoadComponent> Type);
	void AddRoadSegments_C(class USplineComponent* Spline, int32 SegmentsNumber, const TArray<int32>& MeshSegmentIndexes, const TArray<float>& MeshLengthCoefficients, const TArray<class UStaticMesh*>& StaticMeshes, class UStaticMesh* StaticMeshLegacy, const TArray<bool>& MeshFlipY, const struct FVector& Offset, bool FlipY, bool UseScale, float YScale, float StartOffset, float EndOffset, float NewCullDistance, bool NewCastShadow, class FName InCollisionProfileName, bool UseRoll, bool UpdateMeshCollision, bool UseCustomTangents);
	void AddRoadSegmentsSimple_C(class USplineComponent* Spline, int32 SegmentsNumber, const TArray<int32>& MeshSegmentIndexes, const TArray<float>& MeshLengthCoefficients, const TArray<class UStaticMesh*>& StaticMeshes, class UStaticMesh* StaticMeshLegacy, const struct FVector& Offset, bool FlipY, bool UseScale, float YScale, float StartOffset, float EndOffset, float NewCullDistance, bool NewCastShadow, class FName InCollisionProfileName, bool UseRoll, bool UpdateMeshCollision);
	void CreateTrafficLight(class UStaticMesh* Mesh, const class UTrafficlightConfigDataAsset* TrafficTypeConfig, const struct FTransform& ZoneShapeTransform);
	void DestoryInstancedSRC();
	void RegenerateCompontens();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnappyRoad">();
	}
	static class ASnappyRoad* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnappyRoad>();
	}
};

// Class SnappyRoad.SRRoadlight
// 0x0000 (0x02A0 - 0x02A0)
class ASRRoadlight : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SRRoadlight">();
	}
	static class ASRRoadlight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASRRoadlight>();
	}
};

// Class SnappyRoad.SRStaticMeshComponent
// 0x0000 (0x05E0 - 0x05E0)
class USRStaticMeshComponent final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SRStaticMeshComponent">();
	}
	static class USRStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USRStaticMeshComponent>();
	}
};

// Class SnappyRoad.SRTrafficlight
// 0x0080 (0x0320 - 0x02A0)
class ASRTrafficlight final : public AActor
{
public:
	class UStaticMeshComponent*                   TrafficlightMesh;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerate;                                         // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF6[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TrafficlightTypeName;                              // 0x02AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF7[0xC];                                     // 0x02B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ControlledLaneCorrdinates;                         // 0x02C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SRTrafficlight">();
	}
	static class ASRTrafficlight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASRTrafficlight>();
	}
};

// Class SnappyRoad.SRZoneShapeComponent
// 0x0010 (0x05F0 - 0x05E0)
class USRZoneShapeComponent final : public UZoneShapeComponent
{
public:
	bool                                          bCustomShape;                                      // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomTag;                                        // 0x05E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF8[0xE];                                     // 0x05E2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SRZoneShapeComponent">();
	}
	static class USRZoneShapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USRZoneShapeComponent>();
	}
};

// Class SnappyRoad.TrafficlightConfigDataAsset
// 0x0050 (0x0080 - 0x0030)
class UTrafficlightConfigDataAsset final : public UDataAsset
{
public:
	TMap<class FName, struct FTrafficlightTypeConfig> Config;                                            // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrafficlightConfigDataAsset">();
	}
	static class UTrafficlightConfigDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrafficlightConfigDataAsset>();
	}
};

// Class SnappyRoad.SnappyRoadWorldPartitionActor
// 0x0008 (0x02A8 - 0x02A0)
class ASnappyRoadWorldPartitionActor final : public APartitionActor
{
public:
	class UStaticMeshComponent*                   ProxyMeshComponent;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnappyRoadWorldPartitionActor">();
	}
	static class ASnappyRoadWorldPartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnappyRoadWorldPartitionActor>();
	}
};

}

