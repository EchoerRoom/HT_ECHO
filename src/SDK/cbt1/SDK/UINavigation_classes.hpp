#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UINavigation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UINavigation_structs.hpp"
#include "UMG_classes.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class UINavigation.NavigationWidgetBase
// 0x00E0 (0x0258 - 0x0178)
class UNavigationWidgetBase : public UWidget
{
public:
	uint8                                         Pad_3284[0x88];                                    // 0x0178(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FWidgetTags>         Tags;                                              // 0x0200(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3285[0x8];                                     // 0x0250(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ContainsAnyTagByDefaultTags(const TSet<class FName>& SubTags);
	bool ContainsTag(class FName MainTag, class FName SubTag);
	bool ContainsTagByDefaultTag(class FName SubTag);
	bool ContainsTagByNavigationTag(class FName SubTag);
	bool ContainsTags(class FName MainTag, TSet<class FName>* SubTags);
	void Disable();
	void Enable();
	struct FVector2D GetAbsolutePosition();
	struct FVector2D GetDrawSize();
	struct FVector2D GetLocalSize();
	struct FVector2D GetTouchPosition();
	struct FVector2D GetWidgetCenterPosition(const class UWidget* InWidget);
	bool IsEnabled();
	bool IsVisibleRecursive();
	bool IsWidgetReachable(class UWidget* InWidget);

	class UUserWidget* GetOwnerViewportWidget() const;
	class UUserWidget* GetWidgetGeneratedUserWidget(const class UWidget* InWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationWidgetBase">();
	}
	static class UNavigationWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationWidgetBase>();
	}
};

// Class UINavigation.CategorySwitcherWidget
// 0x0018 (0x0270 - 0x0258)
class UCategorySwitcherWidget final : public UNavigationWidgetBase
{
public:
	class FName                                   CategoryContainerName;                             // 0x0258(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationCategoryKey                      CategoryKey;                                       // 0x0260(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_328C[0xF];                                     // 0x0261(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SelectCategory(int32 Param_Index);
	bool SelectCategoryFromKey(const struct FKey& Key, EInputEvent InputEvent);
	void SetActivateCategoryIndex(int32 Param_Index);

	int32 GetActivatedCategoryIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CategorySwitcherWidget">();
	}
	static class UCategorySwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCategorySwitcherWidget>();
	}
};

// Class UINavigation.KeysActionWidget
// 0x0208 (0x0460 - 0x0258)
class alignas(0x10) UKeysActionWidget : public UNavigationWidgetBase
{
public:
	uint8                                         Pad_328E[0x8];                                     // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EKeysActionInputEvent                         KeysActionInputEvent;                              // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKeyIcon;                                    // 0x0261(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_328F[0xDE];                                    // 0x0262(0x00DE)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WidgetNameToClick;                                 // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAlways;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAnyOpacity;                                 // 0x0349(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3290[0x6];                                     // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   GamepadKey;                                        // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   PCKey;                                             // 0x0368(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomSize;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3291[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CustomSize;                                        // 0x0388(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoldKey;                                        // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoClickedOnly;                                    // 0x0399(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3292[0x2];                                     // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldDuration;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNavigateNextGroup;                              // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3293[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextGroupName;                                     // 0x03A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitCurrentGroup;                                 // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3294[0x3];                                     // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             GroupsName;                                        // 0x03B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_3295[0x8];                                     // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnClickedDelegate;                                 // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3296[0x8];                                     // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                GamepadContent;                                    // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                KeyboardContent;                                   // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                TouchContent;                                      // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3297[0x28];                                    // 0x0438(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* GetUserWidgetChildFromName(class UUserWidget* InUserWidget, class FName InWidgetName);
	bool HasKeyAction(const struct FKey& Key);
	bool IsGamepadKeyAction();
	bool IsKeyboardKeyAction();
	bool IsPressed();
	bool IsReleased();
	void OnClickedDelegate__DelegateSignature();
	void Rebuild();
	void ResetToInvalid();
	void SetGamepadKeyVisibility(bool NewVisibility);
	void SetPCKeyVisibility(bool NewVisibility);
	void SetTouchVisibility(bool NewVisibility);

	class FName GetNextGroupName() const;
	bool IsGamepadInputTypeCurrently() const;
	bool IsKeyboardInputTypeCurrently() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeysActionWidget">();
	}
	static class UKeysActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeysActionWidget>();
	}
};

// Class UINavigation.NavigationComponent
// 0x0030 (0x0260 - 0x0230)
class UNavigationComponent final : public USceneComponent
{
public:
	FMulticastInlineDelegateProperty_             ReceiveFocus;                                      // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LostFocus;                                         // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFocusBacked;                                     // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationComponent">();
	}
	static class UNavigationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationComponent>();
	}
};

// Class UINavigation.NavigationProcessorWidget
// 0x0028 (0x0308 - 0x02E0)
class UNavigationProcessorWidget : public UUserWidget
{
public:
	uint8                                         Pad_3299[0x18];                                    // 0x02E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBindWidgetFocusDelegate;                          // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBindWidgetSelectedDelegate;                       // 0x02F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329A[0xE];                                     // 0x02FA(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* BP_GetWidgetFromName(class UUserWidget* InUserWidget, class FName WidgetName);
	bool BP_HandleInputKey(const struct FKey& Key, EInputEvent InputEvent);
	class UUserWidget* GetEntryWidgetFromItem(const class UListView* InListView, const class UObject* InItem);
	class UUserWidget* GetOwnerUserWidget(class UWidget* InWidget);
	class UUserWidget* GetOwnerViewportWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavigationProcessorWidget">();
	}
	static class UNavigationProcessorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavigationProcessorWidget>();
	}
};

// Class UINavigation.ScrollerProcessorWidget
// 0x0020 (0x0278 - 0x0258)
class UScrollerProcessorWidget : public UNavigationWidgetBase
{
public:
	TArray<class FName>                           ScrollContainersName;                              // 0x0258(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ScrollRate;                                        // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x026C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329C[0xB];                                     // 0x026D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScrollerProcessorWidget">();
	}
	static class UScrollerProcessorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollerProcessorWidget>();
	}
};

// Class UINavigation.SliderEditorWidget
// 0x0018 (0x0270 - 0x0258)
class USliderEditorWidget : public UNavigationWidgetBase
{
public:
	class FName                                   SliderName;                                        // 0x0258(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepMultiplier;                                    // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0268(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329D[0x7];                                     // 0x0269(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SliderEditorWidget">();
	}
	static class USliderEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USliderEditorWidget>();
	}
};

// Class UINavigation.UINavigationInterface
// 0x0000 (0x0028 - 0x0028)
class IUINavigationInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationInterface">();
	}
	static class IUINavigationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUINavigationInterface>();
	}
};

// Class UINavigation.UINavigationSubsystem
// 0x03A8 (0x03D8 - 0x0030)
class UUINavigationSubsystem : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_329E[0x348];                                   // 0x0030(0x0348)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CF_CursorSpeed;                                    // 0x0378(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329F[0x58];                                    // 0x0380(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUINavigationSubsystem* Get(const class ULocalPlayer* LocalPlayer);

	void AssignedEnterButton(bool bAssigned);
	bool BackFocus();
	class UUserWidget* BuildCommandMenus(TSoftClassPtr<class UClass> CommandMenusWidget);
	void ClearCursorRequireKeys();
	void ClearGroups();
	void DisableKeysActionFromTag(class FName InTagName);
	void EnableEvaluateWindowsMouseCursor(bool bEnable);
	void EnableKeysActionFromTag(class FName InTagName);
	bool ExitCurrentGroup();
	bool ExitGroup(class FName NextGroupName);
	EGamepadCursorMoveMethod GetCursorMoveMethod();
	EGamepadCursorMoveMode GetCursorMoveMode();
	float GetCursorSensitivity();
	struct FVector2D GetCursorSpeed(const struct FVector2D& AxisValue);
	float GetInputKeyTimeDown(const struct FKey& Key);
	class UKeysActionWidget* GetKeysAction(class FName WidgetName);
	class UUserWidget* GetTopViewportWidget();
	class UUINavigationWidget* GetUINavigationWidget(class FName WidgetName);
	void HideCursor();
	bool IsKeyDown(const struct FKey& Key);
	bool IsKeysActionEnabledByTag(class FName InTagName);
	bool IsKeysActionVisibleByTag(class FName InTagName);
	bool IsNavigationEnabled();
	bool IsOverInteractableWidgets(const struct FVector2D& Position);
	bool IsTopViewportWidget(class UUserWidget* InUserWidget);
	void NavigateToWidget(class UUINavigationWidget* InNavigationWidget, bool bNavigateOnAnyInputType, bool bPlayFocusedSound);
	void PushViewportWidget(class UUserWidget* InUserWidget);
	bool ReleaseCommandMenus();
	void RemoveViewportWidget(class UUserWidget* InUserWidget);
	bool RequestNavigateToNextGroup(class FName NextGroupName, class UUserWidget* OwnerViewportWidget);
	void ResetCursorRequireKeys();
	void SetCursorMoveMethod(EGamepadCursorMoveMethod MoveMethod);
	void SetCursorMoveMode(EGamepadCursorMoveMode MoveMode);
	void SetCursorSensitivity(float Sensitivity);
	void SetCursorSlowDown(float Value);
	void SetNavigationEnable(bool bEnableNavigation);
	void ShowCursor();
	void ShowOrHideCursor();
	void SimulateTouched(const struct FVector2D& TouchLocation);
	void SimulateTouchEnded(const struct FVector2D& TouchLocation);
	void SimulateTouchMoved(const struct FVector2D& TouchLocation);
	void SimulateTouchStarted(const struct FVector2D& TouchLocation);

	int32 GetControllerType() const;
	bool IsCursorVisible() const;
	bool IsGamepadInputType() const;
	bool IsKeyboardEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationSubsystem">();
	}
	static class UUINavigationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationSubsystem>();
	}
};

// Class UINavigation.UINavigationDataAsset
// 0x0060 (0x0090 - 0x0030)
class UUINavigationDataAsset final : public UDataAsset
{
public:
	bool                                          bEnableKeyboard;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundOnNavigated;                             // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32A9[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationToSwitchGamepadTab;                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32AA[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, TSoftObjectPtr<class UDataTable>> DataTables;                                        // 0x0040(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationDataAsset">();
	}
	static class UUINavigationDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationDataAsset>();
	}
};

// Class UINavigation.UINavigationWidget
// 0x0238 (0x0490 - 0x0258)
class UUINavigationWidget : public UNavigationWidgetBase
{
public:
	uint8                                         Pad_32AB[0x8];                                     // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ReceiveFocus;                                      // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             LostFocus;                                         // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFocusBacked;                                     // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FocusBrushDelegate;                                // 0x0290(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32AC[0x10];                                    // 0x02A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            FocusedBrush;                                      // 0x02B0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   WidgetNameToClick;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FocusedOnCreated;                                  // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32AD[0x1];                                     // 0x0389(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SelectOnFocused;                                   // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32AE[0x1];                                     // 0x038B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDraggable;                                      // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32AF[0x1];                                     // 0x038D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsOnRadioBoxPressedorReleased;                    // 0x038E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundOnFocused;                               // 0x038F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUINavigatedScrollParams               ScrollParams;                                      // 0x0398(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EUINavigationWidgetType                       FocusWidgetType;                                   // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32B0[0x3];                                     // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SliderName;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderStepSizeMultiplier;                          // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationSliderInputEvent                 SliderInputEvent;                                  // 0x03B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomFocusWidgetType;                             // 0x03B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32B1[0x2];                                     // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TradeWeight;                                       // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIgnoreVisibleRecursivet;                        // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoopable;                                       // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSequentialProcessed;                            // 0x03C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIgnored;                                        // 0x03C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCheckXY;                                        // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          blostFocusWhenNavFailed;                           // 0x03C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportSimulateTouch;                             // 0x03C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoClickedOnly;                                    // 0x03C7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollIntoViewOnNavigated;                        // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOtherContainerOnNavigation;                 // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLostFocusOnReleased;                              // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32B2[0x19];                                    // 0x03CB(0x0019)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                RectOffset;                                        // 0x03E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32B3[0x9C];                                    // 0x03F4(0x009C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusEventDelegate__DelegateSignature();
	class UWidget* GetUserWidgetChildFromName(class UUserWidget* InUserWidget, class FName InWidgetName);
	void OnEntryReleased();
	void OnEntrySet();
	void OnLostFocus();
	void OnReceiveFocus();
	void OnSelected();
	void SetEnableFocus(bool bEnableFocus);
	void SetFocusBrush(const struct FSlateBrush& InBrush);
	void SetRectOffset(const struct FMargin& InRectOffset);

	uint8 GetCustomFocusWidgetType() const;
	EUINavigationWidgetType GetNavigationWidgetType() const;
	int32 GetStaticNavigationIndex_Down() const;
	int32 GetStaticNavigationIndex_Left() const;
	int32 GetStaticNavigationIndex_Right() const;
	int32 GetStaticNavigationIndex_Self() const;
	int32 GetStaticNavigationIndex_Up() const;
	bool HasFocus() const;
	bool IsStaticNavigationAutoCalculateLeftOrRight() const;
	bool IsStaticNavigationWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UINavigationWidget">();
	}
	static class UUINavigationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUINavigationWidget>();
	}
};

}

