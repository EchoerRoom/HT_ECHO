#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WMActivitySDK

#include "Basic.hpp"

#include "WMActivitySDK_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class WMActivitySDK.WebViewActor
// 0x0050 (0x02F0 - 0x02A0)
class AWebViewActor final : public AActor
{
public:
	class FString                                 URL;                                               // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWMActivityWebViewConfiguration        WebViewConfig;                                     // 0x02B0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWebViewCloseDelegate;                            // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void Close();
	void OnWebViewCloseDelegate__DelegateSignature();
	void OnWebViewCompleteDelegate__DelegateSignature();
	void Open();
	void OpenCommonLiveShowURL();
	void OpenUrlWithComplete(TDelegate<void()> Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebViewActor">();
	}
	static class AWebViewActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWebViewActor>();
	}
};

// Class WMActivitySDK.WMActivitySDKSubsystem
// 0x0040 (0x0070 - 0x0030)
class UWMActivitySDKSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnWebViewClosed;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CustomJSEventDelegate;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRecvKefuNewMessageDelegate;                      // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnKefuOnlineStateChangeDelegate;                   // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static bool MD5FromData(const TArray<uint8>& Data, class FString* OutString);
	static bool MD5FromFile(const class FString& Path, class FString* OutString, int32* Length);

	void AbortShowingActivityList();
	void AddAudioBlackList(const class FString& RoleId, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback);
	void GenericResultDelegate__DelegateSignature(bool bSucceed, int32 Code, const class FString& Msg);
	void AddHTTPHeaderField(const class FString& Field, const class FString& Value);
	void AddHTTPHeaderFields(const TMap<class FString, class FString>& Fields);
	void AddSecurityDomain(const class FString& Domain);
	void AddSecurityDomains(const TArray<class FString>& DomainList);
	void AudioDeviceCheck(TDelegate<void(bool bSucceed, TArray<class FString>& MicList, TArray<class FString>& SpeakerList, int32 Code, const class FString& Msg)> ResultCallback);
	void AudioDeviceDelegate__DelegateSignature(bool bSucceed, const TArray<class FString>& MicList, const TArray<class FString>& SpeakerList, int32 Code, const class FString& Msg);
	void AudioPlayerListener(TDelegate<void(const class FString& AudioUrl)> BeginCallback, TDelegate<void(const class FString& AudioUrl)> EndCallback, TDelegate<void(int32 CurrentTime, int32 Duration, bool IsPlaying)> ProgressCallback, TDelegate<void(int32 Code, const class FString& Msg)> FailCallback, TDelegate<void()> LoadingCallback, TDelegate<void()> LoadingEndCallback);
	void AudioPlayerListenerLoadingEndDelegate__DelegateSignature();
	void AudioPlayerListenerLoadingDelegate__DelegateSignature();
	void AudioPlayerListenerFailDelegate__DelegateSignature(int32 Code, const class FString& Msg);
	void AudioPlayerListenerProgressDelegate__DelegateSignature(int32 CurrentTime, int32 Duration, bool IsPlaying);
	void AudioPlayerListenerEndDelegate__DelegateSignature(const class FString& AudioUrl);
	void AudioPlayerListenerBeginDelegate__DelegateSignature(const class FString& AudioUrl);
	void AudioStreamsChangeDelegate__DelegateSignature(int32 Count);
	void CacheShowActivityListWithExtend();
	void CancelDownloadTask(const class FString& UniqueIdentifier);
	void CancelRecordVoice();
	int32 CheckPermissionStatus(EWMWebPermissionType PermissionType);
	void ClearCache();
	void CloseLiveShow();
	void CloseVideoPlayer();
	void CloseWebView();
	void CustomJSEventDelegate__DelegateSignature(const class FString& Payload, int64 Handle);
	void DisconnectRoomDelegate__DelegateSignature(int32 Code, const class FString& Msg);
	void DisplayLiveShow();
	void DownloadAudioFileWithUrl(const class FString& URL, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> Callback);
	void DownloadAudioFileWithUrlDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg);
	void DownloadAudioFileWithUrlSuffix(const class FString& UrlSuffix, TDelegate<void(bool bSucceed, const class FString& UrlSuffix, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> Callback);
	void DownloadAudioFileWithUrlSuffixDelegate__DelegateSignature(bool bSucceed, const class FString& UrlSuffix, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg);
	void DownloadFile(const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void OnDownloadResultDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg);
	void DownloadFileWithSignature(const class FString& Token, const class FString& Signature, const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void DownloadImage(const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void DownloadImageWithSignature(const class FString& Token, const class FString& Signature, const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void DownloadVideo(const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void DownloadVideoWithSignature(const class FString& Token, const class FString& Signature, const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void EnterAudioRoom(const class FString& RoomId, int32 RoomType, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback, TDelegate<void(int32 Code, const class FString& Msg)> DisconnectRoomCallback, TDelegate<void(int32 Count)> AudioStreamsChangeCallback, TDelegate<void(int32 Type, const class FString& UserId)> RoomMemberChangeCallback, TDelegate<void(int32 AllUser, int32 AccUser, int32 ProxyUser)> MemberCountChangeCallback);
	void MemberCountChangeDelegate__DelegateSignature(int32 AllUser, int32 AccUser, int32 ProxyUser);
	void RoomMemberChangeDelegate__DelegateSignature(int32 Type, const class FString& UserId);
	bool ExecuteWebView(const class FString& Action);
	void ExitAudioRoom(TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	void GetActivityAwardsList(const TArray<class FString>& Types, TDelegate<void(const class FString& Response)> Callback);
	void GetJSResponseDelegate__DelegateSignature(const class FString& Response);
	void GetActivityAwardsStatus(const TArray<class FString>& Types, TDelegate<void(const class FString& Response)> Callback);
	void GetActivityData(const struct FActivityDataRequest& Request, TDelegate<void(const class FString& Response)> Callback);
	void GetActivityDataWithGameUserInfo(const struct FActivityDataRequest& Request, TDelegate<void(const class FString& Response)> Callback);
	void GetActivityDetail(const class FString& AppID, const class FString& ActivityId, TDelegate<void(const class FString& Response)> Callback);
	void GetActivityList(const class FString& AppID, TDelegate<void(const class FString& Response)> Callback);
	void GetActivityListWithTypes(const TArray<class FString>& Types, TDelegate<void(const class FString& Response)> Callback);
	void GetActivityMaterialActIdExist(const TArray<class FString>& Types, TDelegate<void(bool bSucceed, bool bExist, int32 Code, const class FString& Msg)> Callback);
	void GetMaterialActIdExistResultDelegate__DelegateSignature(bool bSucceed, bool bExist, int32 Code, const class FString& Msg);
	void GetActivityMaterialActIdList(const TArray<class FString>& Types, TDelegate<void(bool bSucceed, TArray<class FString>& ActIds, int32 Code, const class FString& Msg)> Callback);
	void GetMaterialActIdListResultDelegate__DelegateSignature(bool bSucceed, const TArray<class FString>& ActIds, int32 Code, const class FString& Msg);
	void GetAudioDurationDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg);
	void GetAudioFileDuration(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> ResultCallback);
	struct FWMAudioPlayerInfoBean GetAudioPlayerInfoBean();
	void GetAudioUrlDuration(const class FString& AudioUrl, TDelegate<void(const class FString& AudioUrl, int32 Duration)> Callback);
	void GetAudioUrlDurationDelegate__DelegateSignature(const class FString& AudioUrl, int32 Duration);
	void GetContentWithFileData(const TArray<uint8>& Data, const class FString& Category, bool NeedEncrypt, TDelegate<void(bool bSucceed, const class FString& MD5, int64 FileLength, TArray<uint8>& Data, int32 Code, const class FString& Msg)> Callback);
	void OnGetFileContentDataResultDelegate__DelegateSignature(bool bSucceed, const class FString& MD5, int64 FileLength, const TArray<uint8>& Data, int32 Code, const class FString& Msg);
	void GetContentWithFilePath(const class FString& Path, const class FString& Category, bool NeedEncrypt, TDelegate<void(bool bSucceed, const class FString& MD5, int64 FileLength, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void OnGetFileContentPathResultDelegate__DelegateSignature(bool bSucceed, const class FString& MD5, int64 FileLength, const class FString& FilePath, int32 Code, const class FString& Msg);
	void GetImageFromAlbumDelegate__DelegateSignature(bool bSucceed, const TArray<struct FWMAlbumMediaInfo>& MediaList, int32 Code, const class FString& Msg);
	void GetLiveShowAndPlayVodLicense(TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback);
	bool GetLoudspeakerEnable();
	bool GetMicEnable();
	int32 GetMicVolume();
	void GetOutOfServiceAnnouncement(const class FString& ServerId, TDelegate<void(bool bSucceed, const class FString& BoardContent, const class FString& ErrorContent, int32 ServerStatus, int32 Code, const class FString& Msg)> Callback);
	void GetOutOfServiceAnnouncementResultDelegate__DelegateSignature(bool bSucceed, const class FString& BoardContent, const class FString& ErrorContent, int32 ServerStatus, int32 Code, const class FString& Msg);
	int32 GetPTTMicVolume();
	int32 GetPTTSpeakerVolume();
	int32 GetRecordingMicVolume();
	void GetRoleList(const class FString& ServerId, const class FString& UserId, const class FString& Token, TDelegate<void(bool bSucceed, TArray<struct FWMActivityRoleInfo>& RoleInfoList, int32 Code, const class FString& Msg)> Callback);
	void GetRoleListDelegate__DelegateSignature(bool bSucceed, const TArray<struct FWMActivityRoleInfo>& RoleInfoList, int32 Code, const class FString& Msg);
	void GetSocialForumData(const class FString& URL, const class FString& OneAppID, const TMap<class FString, class FString>& Params_0, bool IsGET, TDelegate<void(const class FString& Response)> Callback);
	int32 GetSpeakerVolume();
	void GetUserNumberDelegate__DelegateSignature(bool bSucceed, int32 UserNumber, int32 Code, const class FString& Msg);
	void GetUserNumberWithRoomId(const class FString& RoomId, TDelegate<void(bool bSucceed, int32 UserNumber, int32 Code, const class FString& Msg)> Callback);
	bool HasAudioInputDevice();
	void HideLiveShow();
	void HideLiveShowAndKeepAudio();
	void ImageEditDelegate__DelegateSignature(bool bSucceed, const TArray<uint8>& ImageData, int32 Code, const class FString& Msg);
	bool Init();
	void InitCropVideoLicence();
	bool IsRoomEntered();
	void JumpToPermissionSetting();
	void LoginKefu(TDelegate<void(bool bSuccess, const struct FWMKefuServiceInfo& Info, int32 Code, const class FString& Msg)> Delegate);
	void OnLoginKefuResultDelegate__DelegateSignature(bool bSuccess, const struct FWMKefuServiceInfo& Info, int32 Code, const class FString& Msg);
	void OnKefuOnlineStateChangeDelegate__DelegateSignature(bool bIsOnline);
	void OnRecvKefuNewMessageDelegate__DelegateSignature(int32 Type, int32 UnreadCount, const struct FKefuSDKMessage& Message);
	void OnRequestPermissionDelegate__DelegateSignature(EWMWebPermissionType PermissionType, int32 PermissionStatus);
	void OnUploadImageListResultDelegate__DelegateSignature(const TArray<struct FWMCOSUploadCallbackInfo>& UploadCallbackInfos);
	void OnUploadImagesResultDelegate__DelegateSignature(bool bSucceed, const TArray<class FString>& Urls, int32 Code, const class FString& Msg);
	void OnUploadRecordVoiceFileResultDelegate__DelegateSignature(const class FString& FileUrl, const class FString& Content, int32 Code, const class FString& Msg);
	void OnUploadResultDelegate__DelegateSignature(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg);
	void OnUploadVideoResultDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg);
	void OnWebViewCloseDelegate__DelegateSignature();
	void OnWebViewCompleteDelegate__DelegateSignature();
	void OpenAlbum(const struct FWMAlbumInfo& Info, TDelegate<void(bool bSucceed, TArray<struct FWMAlbumMediaInfo>& MediaList, int32 Code, const class FString& Msg)> Callback);
	void OpenAndroid13PermissionName(bool bIsOpen);
	bool OpenCommonLiveShowURL(const class FString& URL);
	bool OpenCommonLiveShowURLWithConfig(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config);
	void OpenDeepLink(const class FString& DeepLink, const class FString& URL, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback);
	void OpenImageEdit(const struct FWMImageEditConfig& Config, TDelegate<void(bool bSucceed, TArray<uint8>& ImageData, int32 Code, const class FString& Msg)> Callback);
	bool OpenLiveShow(const class FString& URL, const int32 ScreenPercent);
	bool OpenPortraitLiveShow(const class FString& URL);
	bool OpenSurvey(const class FString& URL, TDelegate<void(const class FString& Result)> Callback);
	void OpenSurveyDelegate__DelegateSignature(const class FString& Result);
	bool OpenSurveyWithConfig(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config, TDelegate<void(const class FString& Result)> Callback);
	bool OpenUrl(const class FString& URL);
	bool OpenURLConfigWithComplete(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config, TDelegate<void()> Callback);
	bool OpenUrlWithComplete(const class FString& URL, TDelegate<void()> Callback);
	bool OpenURLWithConfig(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config);
	void Pause();
	void PauseAudio();
	void PauseWhenEnterBackGround(bool bPause);
	void PlayAudio(const struct FWMAudioInfo& AudioInfo);
	void PlayAudioFile(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void PlayAudioFileDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg);
	void PlayRecordVoice(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback);
	void PlayVideo(const class FString& Path, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback, int32 PlatformType);
	void PreloadWebpageResource(const TArray<class FString>& Urls);
	int32 QueryCurrentlyOpenedWebview();
	void ReceiveActivityAwards(const class FString& ActivityId, TDelegate<void(const class FString& Response)> Callback);
	void RecognizeAudio(const class FString& URL, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& Text, int32 Code, const class FString& Msg)> Callback);
	void RecognizeAudioDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& Text, int32 Code, const class FString& Msg);
	void RecordMicVolumeDelegate__DelegateSignature(int32 Volume);
	void RecordProgressDelegate__DelegateSignature(const class FString& FilePath, const class FString& Text);
	void RecordResultDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg);
	void RedeemCouponCode(const class FString& CouponCode, const class FString& UserId, const class FString& Token, const class FString& ServerId, const class FString& RoleId, const class FString& RoleLevel, const class FString& VipLevel, const TMap<class FString, class FString>& ExtraInfo, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> OnRedeemCouponResult);
	void RemoveAudioBlackList(const class FString& RoleId, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback);
	void RequestPermission(EWMWebPermissionType PermissionType, TDelegate<void(EWMWebPermissionType PermissionType, int32 PermissionStatus)> Callback);
	void RespondToCustomJSEvent(const class FString& Result, int64 Handle);
	void Resume();
	void ResumeAudio();
	void ResumeLiveShowAudio();
	void SaveImageToPhotoAlbum(const struct FWMShareToForumInfo& Image, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	void SaveVideoToPhotoAlbum(const class FString& VideoPath, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	void SeekAudio(int32 Position);
	void SendEventToJavaScript(const class FString& Type, const TMap<class FString, class FString>& Payload, TDelegate<void(const class FString& Response)> Callback);
	void SetActivityHost(const class FString& ActivityHost);
	void SetAudioRate(float Rate);
	void SetAudioRoleType(int32 RoleType, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback);
	void SetAudioVolume(int32 Volume);
	void SetBaseURL(const class FString& URL);
	void SetBoardMaterialHost(const class FString& BoardMaterialHost);
	void SetChannelId(const class FString& ChannelId);
	void SetChannelType(const class FString& Type);
	void SetCosAuditHost(const class FString& CosAuditHost);
	void SetCosHost(const class FString& CosHost);
	void SetDefaultWebViewConfig(const struct FWMActivityWebViewConfiguration& Config);
	void SetGameLanguage(const class FString& GameLanguage);
	void SetGameRoleInfo(const struct FWMActivityGameRoleInfo& RoleInfo);
	void SetLiveShowMute(bool bEnable);
	void SetLoudspeaker(bool bEnable);
	void SetMediaId(const class FString& MediaID);
	void SetMic(bool bEnable, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	void SetMicVolume(int32 Volume);
	void SetMomentHost(const class FString& MomentHost);
	void SetPTTMicVolume(int32 Volume);
	void SetPTTSpeakerVolume(int32 Volume);
	void SetReadExternalStoragePermissionNameResId(EWMWebPermissionType Type, const TArray<class FString>& ResIds);
	void SetScreenOrientation(int32 Orientation);
	void SetSDKType(const class FString& Type);
	void SetSpeakerVolume(int32 Volume);
	void SetSupportDomStorage(bool bIsSupportDomStorage);
	void SetUp(const class FString& RoleId, const class FString& UserId, const class FString& ServerId, EWMAudioPlatform Type, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	void SetUserMicStreamMaxVolumeDelegate__DelegateSignature(const class FString& MaxVolumeOpenId, int32 MaxVolume);
	void SetUserMicStreamVolumeDelegate__DelegateSignature(const class FString& VolumeOpenId, int32 Volume);
	void SetUserMicStreamVolumeHandler(TDelegate<void(const class FString& VolumeOpenId, int32 Volume)> VolumeDelegate, TDelegate<void(const class FString& MaxVolumeOpenId, int32 MaxVolume)> MaxVolumeDelegate);
	void ShareImageToForum(const class FString& ForumUrl, const struct FWMShareToForumInfo& Info, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	bool ShowActivityList(const TArray<class FString>& Types, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	bool ShowActivityListAndExtendWithComplete(const TArray<class FString>& Types, const TMap<class FString, class FString>& Extend, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback, TDelegate<void()> CompleteCallback);
	void ShowActivityListCompleteDelegate__DelegateSignature();
	bool ShowActivityListWithExtend(const TArray<class FString>& Types, const TMap<class FString, class FString>& Extend, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback);
	void StartRecording(bool bTranslate, TDelegate<void(int32 Volume)> RecordMicVolumeCallback, TDelegate<void(const class FString& FilePath, const class FString& Text)> ProgressCallback, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> ResultCallback);
	void StartRecordVoice(int32 Duration, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> Callback);
	void StartScreenRecording(const struct FWMScreenRecordingConfig& Config, TDelegate<void(bool bSucceed, const class FString& RecordFilePath, int32 Code, const class FString& Msg)> Callback, TDelegate<void()> StartDelegate);
	void WMScreenRecordStartDelegate__DelegateSignature();
	void WMScreenRecordingDelegate__DelegateSignature(bool bSucceed, const class FString& RecordFilePath, int32 Code, const class FString& Msg);
	void StopAudio();
	void StopPlayingAudioFile();
	void StopPlayRecordVoice();
	void StopRecording(bool bCancel);
	void StopRecordVoice();
	void StopScreenRecording();
	void UnsetUp();
	void UploadAudioFile(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& UrlSuffix, int32 Duration, int32 Code, const class FString& Msg)> Callback);
	void UploadAudioFileDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& UrlSuffix, int32 Duration, int32 Code, const class FString& Msg);
	void UploadAvatarFromMediaLibrary(TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)> Callback);
	void UploadFile(const struct FWMCOSUploadTask& Task, TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)> Callback);
	void UploadImage(const struct FWMCOSUploadTask& Task, TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)> Callback);
	void UploadImageList(const TArray<struct FWMCOSUploadTask>& Tasks, const TDelegate<void(TArray<struct FWMCOSUploadCallbackInfo>& UploadCallbackInfos)>& Callback);
	void UploadImagesFromMediaLibrary(TDelegate<void(bool bSucceed, TArray<class FString>& Urls, int32 Code, const class FString& Msg)> Callback);
	void UploadRecordVoiceFile(const struct FWMCOSUploadTask& Task, const TDelegate<void(const class FString& FileUrl, const class FString& Content, int32 Code, const class FString& Msg)>& Callback);
	void UploadVideo(const struct FWMCOSUploadTask& Task, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)> Callback);
	void UploadVideoFromMediaLibrary(TDelegate<void(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)> Callback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WMActivitySDKSubsystem">();
	}
	static class UWMActivitySDKSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWMActivitySDKSubsystem>();
	}
};

// Class WMActivitySDK.KefuSDKTextMessage
// 0x0010 (0x0038 - 0x0028)
class UKefuSDKTextMessage final : public UObject
{
public:
	class FString                                 Text;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKTextMessage">();
	}
	static class UKefuSDKTextMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKTextMessage>();
	}
};

// Class WMActivitySDK.KefuSDKEmojiMessage
// 0x0018 (0x0040 - 0x0028)
class UKefuSDKEmojiMessage final : public UObject
{
public:
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ByteSize;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_KefuSDKEmojiMessage;                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKEmojiMessage">();
	}
	static class UKefuSDKEmojiMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKEmojiMessage>();
	}
};

// Class WMActivitySDK.KefuSDKImageMessage
// 0x0090 (0x00B8 - 0x0028)
class UKefuSDKImageMessage final : public UObject
{
public:
	class FString                                 Path;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailUUID;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailFilename;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThumbnailWidth;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThumbnailHeight;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BigImgUUID;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BigImgFilename;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigImgWidth;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigImgHeight;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalImgUUID;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalImgFilename;                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalImgWidth;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalImgHeight;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalByteSize;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3319[0x4];                                     // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKImageMessage">();
	}
	static class UKefuSDKImageMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKImageMessage>();
	}
};

// Class WMActivitySDK.KefuSDKAudioMessage
// 0x0070 (0x0098 - 0x0028)
class UKefuSDKAudioMessage final : public UObject
{
public:
	int32                                         Duration;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331A[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UUID;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ByteSize;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachText;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Format;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKAudioMessage">();
	}
	static class UKefuSDKAudioMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKAudioMessage>();
	}
};

// Class WMActivitySDK.KefuSDKVideoMessage
// 0x0090 (0x00B8 - 0x0028)
class UKefuSDKVideoMessage final : public UObject
{
public:
	class FString                                 VideoPath;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SnapshotPath;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoUUID;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoFilename;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         VideoByteSize;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoType;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331B[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SnapshotUUID;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SnapshotFilename;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapshotWidth;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapshotHeight;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SnapshotByteSize;                                  // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKVideoMessage">();
	}
	static class UKefuSDKVideoMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKVideoMessage>();
	}
};

// Class WMActivitySDK.KefuSDKFileMessage
// 0x0048 (0x0070 - 0x0028)
class UKefuSDKFileMessage final : public UObject
{
public:
	class FString                                 Path;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_KefuSDKFileMessage;                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UUID;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ByteSize;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331C[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKFileMessage">();
	}
	static class UKefuSDKFileMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKFileMessage>();
	}
};

// Class WMActivitySDK.KefuSDKLocationMessage
// 0x0030 (0x0058 - 0x0028)
class UKefuSDKLocationMessage final : public UObject
{
public:
	class FString                                 Desc;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Longitude;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Latitude;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKLocationMessage">();
	}
	static class UKefuSDKLocationMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKLocationMessage>();
	}
};

// Class WMActivitySDK.KefuSDKPassMessage
// 0x0018 (0x0040 - 0x0028)
class UKefuSDKPassMessage final : public UObject
{
public:
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         ByteSize;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKPassMessage">();
	}
	static class UKefuSDKPassMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKPassMessage>();
	}
};

// Class WMActivitySDK.KefuSDKCustomMessage
// 0x0018 (0x0040 - 0x0028)
class UKefuSDKCustomMessage final : public UObject
{
public:
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         ByteSize;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KefuSDKCustomMessage">();
	}
	static class UKefuSDKCustomMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKefuSDKCustomMessage>();
	}
};

}

