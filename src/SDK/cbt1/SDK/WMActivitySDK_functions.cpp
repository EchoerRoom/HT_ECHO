#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WMActivitySDK

#include "Basic.hpp"

#include "WMActivitySDK_classes.hpp"
#include "WMActivitySDK_parameters.hpp"


namespace SDK
{

// Function WMActivitySDK.WebViewActor.Close
// (Native, Public, BlueprintCallable)

void AWebViewActor::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebViewActor", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WebViewActor.OnWebViewCloseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AWebViewActor::OnWebViewCloseDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebViewActor", "OnWebViewCloseDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction WMActivitySDK.WebViewActor.OnWebViewCompleteDelegate__DelegateSignature
// (Public, Delegate)

void AWebViewActor::OnWebViewCompleteDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebViewActor", "OnWebViewCompleteDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WMActivitySDK.WebViewActor.Open
// (Native, Public, BlueprintCallable)

void AWebViewActor::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebViewActor", "Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WebViewActor.OpenCommonLiveShowURL
// (Native, Public, BlueprintCallable)

void AWebViewActor::OpenCommonLiveShowURL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebViewActor", "OpenCommonLiveShowURL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WebViewActor.OpenUrlWithComplete
// (Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWebViewActor::OpenUrlWithComplete(TDelegate<void()> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebViewActor", "OpenUrlWithComplete");

	Params::WebViewActor_OpenUrlWithComplete Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.MD5FromData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::MD5FromData(const TArray<uint8>& Data, class FString* OutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WMActivitySDKSubsystem", "MD5FromData");

	Params::WMActivitySDKSubsystem_MD5FromData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.MD5FromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::MD5FromFile(const class FString& Path, class FString* OutString, int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WMActivitySDKSubsystem", "MD5FromFile");

	Params::WMActivitySDKSubsystem_MD5FromFile Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	if (Length != nullptr)
		*Length = Parms.Length;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AbortShowingActivityList
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::AbortShowingActivityList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AbortShowingActivityList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AddAudioBlackList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AddAudioBlackList(const class FString& RoleId, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AddAudioBlackList");

	Params::WMActivitySDKSubsystem_AddAudioBlackList Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GenericResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GenericResultDelegate__DelegateSignature(bool bSucceed, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GenericResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GenericResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AddHTTPHeaderField
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AddHTTPHeaderField(const class FString& Field, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AddHTTPHeaderField");

	Params::WMActivitySDKSubsystem_AddHTTPHeaderField Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AddHTTPHeaderFields
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>      Fields                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AddHTTPHeaderFields(const TMap<class FString, class FString>& Fields)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AddHTTPHeaderFields");

	Params::WMActivitySDKSubsystem_AddHTTPHeaderFields Parms{};

	Parms.Fields = std::move(Fields);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AddSecurityDomain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Domain                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AddSecurityDomain(const class FString& Domain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AddSecurityDomain");

	Params::WMActivitySDKSubsystem_AddSecurityDomain Parms{};

	Parms.Domain = std::move(Domain);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AddSecurityDomains
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   DomainList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AddSecurityDomains(const TArray<class FString>& DomainList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AddSecurityDomains");

	Params::WMActivitySDKSubsystem_AddSecurityDomains Parms{};

	Parms.DomainList = std::move(DomainList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AudioDeviceCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceed, TArray<class FString>& MicList, TArray<class FString>& SpeakerList, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioDeviceCheck(TDelegate<void(bool bSucceed, TArray<class FString>& MicList, TArray<class FString>& SpeakerList, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioDeviceCheck");

	Params::WMActivitySDKSubsystem_AudioDeviceCheck Parms{};

	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioDeviceDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   MicList                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   SpeakerList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioDeviceDelegate__DelegateSignature(bool bSucceed, const TArray<class FString>& MicList, const TArray<class FString>& SpeakerList, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioDeviceDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_AudioDeviceDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.MicList = std::move(MicList);
	Parms.SpeakerList = std::move(SpeakerList);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& AudioUrl)>BeginCallback                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& AudioUrl)>EndCallback                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 CurrentTime, int32 Duration, bool IsPlaying)>ProgressCallback                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Code, const class FString& Msg)>FailCallback                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       LoadingCallback                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       LoadingEndCallback                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioPlayerListener(TDelegate<void(const class FString& AudioUrl)> BeginCallback, TDelegate<void(const class FString& AudioUrl)> EndCallback, TDelegate<void(int32 CurrentTime, int32 Duration, bool IsPlaying)> ProgressCallback, TDelegate<void(int32 Code, const class FString& Msg)> FailCallback, TDelegate<void()> LoadingCallback, TDelegate<void()> LoadingEndCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListener");

	Params::WMActivitySDKSubsystem_AudioPlayerListener Parms{};

	Parms.BeginCallback = BeginCallback;
	Parms.EndCallback = EndCallback;
	Parms.ProgressCallback = ProgressCallback;
	Parms.FailCallback = FailCallback;
	Parms.LoadingCallback = LoadingCallback;
	Parms.LoadingEndCallback = LoadingEndCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListenerLoadingEndDelegate__DelegateSignature
// (Public, Delegate)

void UWMActivitySDKSubsystem::AudioPlayerListenerLoadingEndDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListenerLoadingEndDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListenerLoadingDelegate__DelegateSignature
// (Public, Delegate)

void UWMActivitySDKSubsystem::AudioPlayerListenerLoadingDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListenerLoadingDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListenerFailDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioPlayerListenerFailDelegate__DelegateSignature(int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListenerFailDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_AudioPlayerListenerFailDelegate__DelegateSignature Parms{};

	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListenerProgressDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   CurrentTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsPlaying                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioPlayerListenerProgressDelegate__DelegateSignature(int32 CurrentTime, int32 Duration, bool IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListenerProgressDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_AudioPlayerListenerProgressDelegate__DelegateSignature Parms{};

	Parms.CurrentTime = CurrentTime;
	Parms.Duration = Duration;
	Parms.IsPlaying = IsPlaying;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListenerEndDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           AudioUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioPlayerListenerEndDelegate__DelegateSignature(const class FString& AudioUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListenerEndDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_AudioPlayerListenerEndDelegate__DelegateSignature Parms{};

	Parms.AudioUrl = std::move(AudioUrl);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioPlayerListenerBeginDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           AudioUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioPlayerListenerBeginDelegate__DelegateSignature(const class FString& AudioUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioPlayerListenerBeginDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_AudioPlayerListenerBeginDelegate__DelegateSignature Parms{};

	Parms.AudioUrl = std::move(AudioUrl);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.AudioStreamsChangeDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::AudioStreamsChangeDelegate__DelegateSignature(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "AudioStreamsChangeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_AudioStreamsChangeDelegate__DelegateSignature Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CacheShowActivityListWithExtend
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::CacheShowActivityListWithExtend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CacheShowActivityListWithExtend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CancelDownloadTask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           UniqueIdentifier                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::CancelDownloadTask(const class FString& UniqueIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CancelDownloadTask");

	Params::WMActivitySDKSubsystem_CancelDownloadTask Parms{};

	Parms.UniqueIdentifier = std::move(UniqueIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CancelRecordVoice
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::CancelRecordVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CancelRecordVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CheckPermissionStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWMWebPermissionType                    PermissionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::CheckPermissionStatus(EWMWebPermissionType PermissionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CheckPermissionStatus");

	Params::WMActivitySDKSubsystem_CheckPermissionStatus Parms{};

	Parms.PermissionType = PermissionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ClearCache
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::ClearCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ClearCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CloseLiveShow
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::CloseLiveShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CloseLiveShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CloseVideoPlayer
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::CloseVideoPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CloseVideoPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.CloseWebView
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::CloseWebView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CloseWebView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.CustomJSEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           Payload                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::CustomJSEventDelegate__DelegateSignature(const class FString& Payload, int64 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "CustomJSEventDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_CustomJSEventDelegate__DelegateSignature Parms{};

	Parms.Payload = std::move(Payload);
	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.DisconnectRoomDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DisconnectRoomDelegate__DelegateSignature(int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DisconnectRoomDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_DisconnectRoomDelegate__DelegateSignature Parms{};

	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DisplayLiveShow
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::DisplayLiveShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DisplayLiveShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadAudioFileWithUrl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& URL, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadAudioFileWithUrl(const class FString& URL, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadAudioFileWithUrl");

	Params::WMActivitySDKSubsystem_DownloadAudioFileWithUrl Parms{};

	Parms.URL = std::move(URL);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.DownloadAudioFileWithUrlDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadAudioFileWithUrlDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadAudioFileWithUrlDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_DownloadAudioFileWithUrlDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.URL = std::move(URL);
	Parms.FilePath = std::move(FilePath);
	Parms.Duration = Duration;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadAudioFileWithUrlSuffix
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           UrlSuffix                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& UrlSuffix, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadAudioFileWithUrlSuffix(const class FString& UrlSuffix, TDelegate<void(bool bSucceed, const class FString& UrlSuffix, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadAudioFileWithUrlSuffix");

	Params::WMActivitySDKSubsystem_DownloadAudioFileWithUrlSuffix Parms{};

	Parms.UrlSuffix = std::move(UrlSuffix);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.DownloadAudioFileWithUrlSuffixDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UrlSuffix                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadAudioFileWithUrlSuffixDelegate__DelegateSignature(bool bSucceed, const class FString& UrlSuffix, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadAudioFileWithUrlSuffixDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_DownloadAudioFileWithUrlSuffixDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.UrlSuffix = std::move(UrlSuffix);
	Parms.FilePath = std::move(FilePath);
	Parms.Duration = Duration;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSDownloadTask               Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadFile(const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadFile");

	Params::WMActivitySDKSubsystem_DownloadFile Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnDownloadResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnDownloadResultDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnDownloadResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnDownloadResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.FilePath = std::move(FilePath);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadFileWithSignature
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Signature                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMCOSDownloadTask               Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadFileWithSignature(const class FString& Token, const class FString& Signature, const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadFileWithSignature");

	Params::WMActivitySDKSubsystem_DownloadFileWithSignature Parms{};

	Parms.Token = std::move(Token);
	Parms.Signature = std::move(Signature);
	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSDownloadTask               Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadImage(const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadImage");

	Params::WMActivitySDKSubsystem_DownloadImage Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadImageWithSignature
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Signature                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMCOSDownloadTask               Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadImageWithSignature(const class FString& Token, const class FString& Signature, const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadImageWithSignature");

	Params::WMActivitySDKSubsystem_DownloadImageWithSignature Parms{};

	Parms.Token = std::move(Token);
	Parms.Signature = std::move(Signature);
	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadVideo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSDownloadTask               Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadVideo(const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadVideo");

	Params::WMActivitySDKSubsystem_DownloadVideo Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.DownloadVideoWithSignature
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Signature                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMCOSDownloadTask               Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::DownloadVideoWithSignature(const class FString& Token, const class FString& Signature, const struct FWMCOSDownloadTask& Task, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "DownloadVideoWithSignature");

	Params::WMActivitySDKSubsystem_DownloadVideoWithSignature Parms{};

	Parms.Token = std::move(Token);
	Parms.Signature = std::move(Signature);
	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.EnterAudioRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RoomId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RoomType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Code, const class FString& Msg)>DisconnectRoomCallback                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Count)>            AudioStreamsChangeCallback                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Type, const class FString& UserId)>RoomMemberChangeCallback                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 AllUser, int32 AccUser, int32 ProxyUser)>MemberCountChangeCallback                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::EnterAudioRoom(const class FString& RoomId, int32 RoomType, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback, TDelegate<void(int32 Code, const class FString& Msg)> DisconnectRoomCallback, TDelegate<void(int32 Count)> AudioStreamsChangeCallback, TDelegate<void(int32 Type, const class FString& UserId)> RoomMemberChangeCallback, TDelegate<void(int32 AllUser, int32 AccUser, int32 ProxyUser)> MemberCountChangeCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "EnterAudioRoom");

	Params::WMActivitySDKSubsystem_EnterAudioRoom Parms{};

	Parms.RoomId = std::move(RoomId);
	Parms.RoomType = RoomType;
	Parms.ResultCallback = ResultCallback;
	Parms.DisconnectRoomCallback = DisconnectRoomCallback;
	Parms.AudioStreamsChangeCallback = AudioStreamsChangeCallback;
	Parms.RoomMemberChangeCallback = RoomMemberChangeCallback;
	Parms.MemberCountChangeCallback = MemberCountChangeCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.MemberCountChangeDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   AllUser                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AccUser                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProxyUser                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::MemberCountChangeDelegate__DelegateSignature(int32 AllUser, int32 AccUser, int32 ProxyUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "MemberCountChangeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_MemberCountChangeDelegate__DelegateSignature Parms{};

	Parms.AllUser = AllUser;
	Parms.AccUser = AccUser;
	Parms.ProxyUser = ProxyUser;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.RoomMemberChangeDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RoomMemberChangeDelegate__DelegateSignature(int32 Type, const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RoomMemberChangeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_RoomMemberChangeDelegate__DelegateSignature Parms{};

	Parms.Type = Type;
	Parms.UserId = std::move(UserId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ExecuteWebView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Action                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::ExecuteWebView(const class FString& Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ExecuteWebView");

	Params::WMActivitySDKSubsystem_ExecuteWebView Parms{};

	Parms.Action = std::move(Action);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ExitAudioRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::ExitAudioRoom(TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ExitAudioRoom");

	Params::WMActivitySDKSubsystem_ExitAudioRoom Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityAwardsList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityAwardsList(const TArray<class FString>& Types, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityAwardsList");

	Params::WMActivitySDKSubsystem_GetActivityAwardsList Parms{};

	Parms.Types = std::move(Types);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetJSResponseDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           Response                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetJSResponseDelegate__DelegateSignature(const class FString& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetJSResponseDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetJSResponseDelegate__DelegateSignature Parms{};

	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityAwardsStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityAwardsStatus(const TArray<class FString>& Types, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityAwardsStatus");

	Params::WMActivitySDKSubsystem_GetActivityAwardsStatus Parms{};

	Parms.Types = std::move(Types);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FActivityDataRequest             Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityData(const struct FActivityDataRequest& Request, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityData");

	Params::WMActivitySDKSubsystem_GetActivityData Parms{};

	Parms.Request = std::move(Request);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityDataWithGameUserInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FActivityDataRequest             Request                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityDataWithGameUserInfo(const struct FActivityDataRequest& Request, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityDataWithGameUserInfo");

	Params::WMActivitySDKSubsystem_GetActivityDataWithGameUserInfo Parms{};

	Parms.Request = std::move(Request);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityDetail
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AppID                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActivityId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityDetail(const class FString& AppID, const class FString& ActivityId, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityDetail");

	Params::WMActivitySDKSubsystem_GetActivityDetail Parms{};

	Parms.AppID = std::move(AppID);
	Parms.ActivityId = std::move(ActivityId);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AppID                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityList(const class FString& AppID, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityList");

	Params::WMActivitySDKSubsystem_GetActivityList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityListWithTypes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityListWithTypes(const TArray<class FString>& Types, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityListWithTypes");

	Params::WMActivitySDKSubsystem_GetActivityListWithTypes Parms{};

	Parms.Types = std::move(Types);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityMaterialActIdExist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, bool bExist, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityMaterialActIdExist(const TArray<class FString>& Types, TDelegate<void(bool bSucceed, bool bExist, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityMaterialActIdExist");

	Params::WMActivitySDKSubsystem_GetActivityMaterialActIdExist Parms{};

	Parms.Types = std::move(Types);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetMaterialActIdExistResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExist                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetMaterialActIdExistResultDelegate__DelegateSignature(bool bSucceed, bool bExist, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetMaterialActIdExistResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetMaterialActIdExistResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.bExist = bExist;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetActivityMaterialActIdList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, TArray<class FString>& ActIds, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetActivityMaterialActIdList(const TArray<class FString>& Types, TDelegate<void(bool bSucceed, TArray<class FString>& ActIds, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetActivityMaterialActIdList");

	Params::WMActivitySDKSubsystem_GetActivityMaterialActIdList Parms{};

	Parms.Types = std::move(Types);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetMaterialActIdListResultDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ActIds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetMaterialActIdListResultDelegate__DelegateSignature(bool bSucceed, const TArray<class FString>& ActIds, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetMaterialActIdListResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetMaterialActIdListResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.ActIds = std::move(ActIds);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetAudioDurationDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetAudioDurationDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetAudioDurationDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetAudioDurationDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.FilePath = std::move(FilePath);
	Parms.Duration = Duration;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetAudioFileDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetAudioFileDuration(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetAudioFileDuration");

	Params::WMActivitySDKSubsystem_GetAudioFileDuration Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetAudioPlayerInfoBean
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FWMAudioPlayerInfoBean           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWMAudioPlayerInfoBean UWMActivitySDKSubsystem::GetAudioPlayerInfoBean()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetAudioPlayerInfoBean");

	Params::WMActivitySDKSubsystem_GetAudioPlayerInfoBean Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetAudioUrlDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AudioUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& AudioUrl, int32 Duration)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetAudioUrlDuration(const class FString& AudioUrl, TDelegate<void(const class FString& AudioUrl, int32 Duration)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetAudioUrlDuration");

	Params::WMActivitySDKSubsystem_GetAudioUrlDuration Parms{};

	Parms.AudioUrl = std::move(AudioUrl);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetAudioUrlDurationDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           AudioUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetAudioUrlDurationDelegate__DelegateSignature(const class FString& AudioUrl, int32 Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetAudioUrlDurationDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetAudioUrlDurationDelegate__DelegateSignature Parms{};

	Parms.AudioUrl = std::move(AudioUrl);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetContentWithFileData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Category                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NeedEncrypt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& MD5, int64 FileLength, TArray<uint8>& Data, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetContentWithFileData(const TArray<uint8>& Data, const class FString& Category, bool NeedEncrypt, TDelegate<void(bool bSucceed, const class FString& MD5, int64 FileLength, TArray<uint8>& Data, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetContentWithFileData");

	Params::WMActivitySDKSubsystem_GetContentWithFileData Parms{};

	Parms.Data = std::move(Data);
	Parms.Category = std::move(Category);
	Parms.NeedEncrypt = NeedEncrypt;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnGetFileContentDataResultDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MD5                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   FileLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnGetFileContentDataResultDelegate__DelegateSignature(bool bSucceed, const class FString& MD5, int64 FileLength, const TArray<uint8>& Data, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnGetFileContentDataResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnGetFileContentDataResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.MD5 = std::move(MD5);
	Parms.FileLength = FileLength;
	Parms.Data = std::move(Data);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetContentWithFilePath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Category                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NeedEncrypt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& MD5, int64 FileLength, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetContentWithFilePath(const class FString& Path, const class FString& Category, bool NeedEncrypt, TDelegate<void(bool bSucceed, const class FString& MD5, int64 FileLength, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetContentWithFilePath");

	Params::WMActivitySDKSubsystem_GetContentWithFilePath Parms{};

	Parms.Path = std::move(Path);
	Parms.Category = std::move(Category);
	Parms.NeedEncrypt = NeedEncrypt;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnGetFileContentPathResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MD5                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   FileLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnGetFileContentPathResultDelegate__DelegateSignature(bool bSucceed, const class FString& MD5, int64 FileLength, const class FString& FilePath, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnGetFileContentPathResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnGetFileContentPathResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.MD5 = std::move(MD5);
	Parms.FileLength = FileLength;
	Parms.FilePath = std::move(FilePath);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetImageFromAlbumDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWMAlbumMediaInfo>        MediaList                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetImageFromAlbumDelegate__DelegateSignature(bool bSucceed, const TArray<struct FWMAlbumMediaInfo>& MediaList, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetImageFromAlbumDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetImageFromAlbumDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.MediaList = std::move(MediaList);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetLiveShowAndPlayVodLicense
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetLiveShowAndPlayVodLicense(TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetLiveShowAndPlayVodLicense");

	Params::WMActivitySDKSubsystem_GetLiveShowAndPlayVodLicense Parms{};

	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetLoudspeakerEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::GetLoudspeakerEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetLoudspeakerEnable");

	Params::WMActivitySDKSubsystem_GetLoudspeakerEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetMicEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::GetMicEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetMicEnable");

	Params::WMActivitySDKSubsystem_GetMicEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetMicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::GetMicVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetMicVolume");

	Params::WMActivitySDKSubsystem_GetMicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetOutOfServiceAnnouncement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& BoardContent, const class FString& ErrorContent, int32 ServerStatus, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetOutOfServiceAnnouncement(const class FString& ServerId, TDelegate<void(bool bSucceed, const class FString& BoardContent, const class FString& ErrorContent, int32 ServerStatus, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetOutOfServiceAnnouncement");

	Params::WMActivitySDKSubsystem_GetOutOfServiceAnnouncement Parms{};

	Parms.ServerId = std::move(ServerId);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetOutOfServiceAnnouncementResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BoardContent                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorContent                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ServerStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetOutOfServiceAnnouncementResultDelegate__DelegateSignature(bool bSucceed, const class FString& BoardContent, const class FString& ErrorContent, int32 ServerStatus, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetOutOfServiceAnnouncementResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetOutOfServiceAnnouncementResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.BoardContent = std::move(BoardContent);
	Parms.ErrorContent = std::move(ErrorContent);
	Parms.ServerStatus = ServerStatus;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetPTTMicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::GetPTTMicVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetPTTMicVolume");

	Params::WMActivitySDKSubsystem_GetPTTMicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetPTTSpeakerVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::GetPTTSpeakerVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetPTTSpeakerVolume");

	Params::WMActivitySDKSubsystem_GetPTTSpeakerVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetRecordingMicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::GetRecordingMicVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetRecordingMicVolume");

	Params::WMActivitySDKSubsystem_GetRecordingMicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetRoleList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, TArray<struct FWMActivityRoleInfo>& RoleInfoList, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetRoleList(const class FString& ServerId, const class FString& UserId, const class FString& Token, TDelegate<void(bool bSucceed, TArray<struct FWMActivityRoleInfo>& RoleInfoList, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetRoleList");

	Params::WMActivitySDKSubsystem_GetRoleList Parms{};

	Parms.ServerId = std::move(ServerId);
	Parms.UserId = std::move(UserId);
	Parms.Token = std::move(Token);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetRoleListDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWMActivityRoleInfo>      RoleInfoList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetRoleListDelegate__DelegateSignature(bool bSucceed, const TArray<struct FWMActivityRoleInfo>& RoleInfoList, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetRoleListDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetRoleListDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.RoleInfoList = std::move(RoleInfoList);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetSocialForumData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OneAppID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsGET                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetSocialForumData(const class FString& URL, const class FString& OneAppID, const TMap<class FString, class FString>& Params_0, bool IsGET, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetSocialForumData");

	Params::WMActivitySDKSubsystem_GetSocialForumData Parms{};

	Parms.URL = std::move(URL);
	Parms.OneAppID = std::move(OneAppID);
	Parms.Params_0 = std::move(Params_0);
	Parms.IsGET = IsGET;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetSpeakerVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::GetSpeakerVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetSpeakerVolume");

	Params::WMActivitySDKSubsystem_GetSpeakerVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.GetUserNumberDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetUserNumberDelegate__DelegateSignature(bool bSucceed, int32 UserNumber, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetUserNumberDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_GetUserNumberDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.UserNumber = UserNumber;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.GetUserNumberWithRoomId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RoomId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 UserNumber, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::GetUserNumberWithRoomId(const class FString& RoomId, TDelegate<void(bool bSucceed, int32 UserNumber, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "GetUserNumberWithRoomId");

	Params::WMActivitySDKSubsystem_GetUserNumberWithRoomId Parms{};

	Parms.RoomId = std::move(RoomId);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.hasAudioInputDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::HasAudioInputDevice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "hasAudioInputDevice");

	Params::WMActivitySDKSubsystem_HasAudioInputDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.HideLiveShow
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::HideLiveShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "HideLiveShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.HideLiveShowAndKeepAudio
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::HideLiveShowAndKeepAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "HideLiveShowAndKeepAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.ImageEditDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ImageData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::ImageEditDelegate__DelegateSignature(bool bSucceed, const TArray<uint8>& ImageData, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ImageEditDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_ImageEditDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.ImageData = std::move(ImageData);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "Init");

	Params::WMActivitySDKSubsystem_Init Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.InitCropVideoLicence
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::InitCropVideoLicence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "InitCropVideoLicence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.IsRoomEntered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::IsRoomEntered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "IsRoomEntered");

	Params::WMActivitySDKSubsystem_IsRoomEntered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.JumpToPermissionSetting
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::JumpToPermissionSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "JumpToPermissionSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.LoginKefu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSuccess, const struct FWMKefuServiceInfo& Info, int32 Code, const class FString& Msg)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::LoginKefu(TDelegate<void(bool bSuccess, const struct FWMKefuServiceInfo& Info, int32 Code, const class FString& Msg)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "LoginKefu");

	Params::WMActivitySDKSubsystem_LoginKefu Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnLoginKefuResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMKefuServiceInfo               Info                                                   (Parm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnLoginKefuResultDelegate__DelegateSignature(bool bSuccess, const struct FWMKefuServiceInfo& Info, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnLoginKefuResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnLoginKefuResultDelegate__DelegateSignature Parms{};

	Parms.bSuccess = bSuccess;
	Parms.Info = std::move(Info);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnKefuOnlineStateChangeDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bIsOnline                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnKefuOnlineStateChangeDelegate__DelegateSignature(bool bIsOnline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnKefuOnlineStateChangeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnKefuOnlineStateChangeDelegate__DelegateSignature Parms{};

	Parms.bIsOnline = bIsOnline;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnRecvKefuNewMessageDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UnreadCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKefuSDKMessage                  Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnRecvKefuNewMessageDelegate__DelegateSignature(int32 Type, int32 UnreadCount, const struct FKefuSDKMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnRecvKefuNewMessageDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnRecvKefuNewMessageDelegate__DelegateSignature Parms{};

	Parms.Type = Type;
	Parms.UnreadCount = UnreadCount;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnRequestPermissionDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// EWMWebPermissionType                    PermissionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PermissionStatus                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnRequestPermissionDelegate__DelegateSignature(EWMWebPermissionType PermissionType, int32 PermissionStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnRequestPermissionDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnRequestPermissionDelegate__DelegateSignature Parms{};

	Parms.PermissionType = PermissionType;
	Parms.PermissionStatus = PermissionStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnUploadImageListResultDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// TArray<struct FWMCOSUploadCallbackInfo> UploadCallbackInfos                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnUploadImageListResultDelegate__DelegateSignature(const TArray<struct FWMCOSUploadCallbackInfo>& UploadCallbackInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnUploadImageListResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnUploadImageListResultDelegate__DelegateSignature Parms{};

	Parms.UploadCallbackInfos = std::move(UploadCallbackInfos);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnUploadImagesResultDelegate__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Urls                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnUploadImagesResultDelegate__DelegateSignature(bool bSucceed, const TArray<class FString>& Urls, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnUploadImagesResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnUploadImagesResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.Urls = std::move(Urls);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnUploadRecordVoiceFileResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           FileUrl                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Content                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnUploadRecordVoiceFileResultDelegate__DelegateSignature(const class FString& FileUrl, const class FString& Content, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnUploadRecordVoiceFileResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnUploadRecordVoiceFileResultDelegate__DelegateSignature Parms{};

	Parms.FileUrl = std::move(FileUrl);
	Parms.Content = std::move(Content);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnUploadResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnUploadResultDelegate__DelegateSignature(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnUploadResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnUploadResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.URL = std::move(URL);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnUploadVideoResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CoverUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OnUploadVideoResultDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnUploadVideoResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OnUploadVideoResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.URL = std::move(URL);
	Parms.CoverUrl = std::move(CoverUrl);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnWebViewCloseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWMActivitySDKSubsystem::OnWebViewCloseDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnWebViewCloseDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OnWebViewCompleteDelegate__DelegateSignature
// (Public, Delegate)

void UWMActivitySDKSubsystem::OnWebViewCompleteDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OnWebViewCompleteDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenAlbum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FWMAlbumInfo                     Info                                                   (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, TArray<struct FWMAlbumMediaInfo>& MediaList, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OpenAlbum(const struct FWMAlbumInfo& Info, TDelegate<void(bool bSucceed, TArray<struct FWMAlbumMediaInfo>& MediaList, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenAlbum");

	Params::WMActivitySDKSubsystem_OpenAlbum Parms{};

	Parms.Info = std::move(Info);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenAndroid13PermissionName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsOpen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OpenAndroid13PermissionName(bool bIsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenAndroid13PermissionName");

	Params::WMActivitySDKSubsystem_OpenAndroid13PermissionName Parms{};

	Parms.bIsOpen = bIsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenCommonLiveShowURL
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenCommonLiveShowURL(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenCommonLiveShowURL");

	Params::WMActivitySDKSubsystem_OpenCommonLiveShowURL Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenCommonLiveShowURLWithConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMActivityWebViewConfiguration  Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenCommonLiveShowURLWithConfig(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenCommonLiveShowURLWithConfig");

	Params::WMActivitySDKSubsystem_OpenCommonLiveShowURLWithConfig Parms{};

	Parms.URL = std::move(URL);
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenDeepLink
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DeepLink                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OpenDeepLink(const class FString& DeepLink, const class FString& URL, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenDeepLink");

	Params::WMActivitySDKSubsystem_OpenDeepLink Parms{};

	Parms.DeepLink = std::move(DeepLink);
	Parms.URL = std::move(URL);
	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenImageEdit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMImageEditConfig               Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, TArray<uint8>& ImageData, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OpenImageEdit(const struct FWMImageEditConfig& Config, TDelegate<void(bool bSucceed, TArray<uint8>& ImageData, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenImageEdit");

	Params::WMActivitySDKSubsystem_OpenImageEdit Parms{};

	Parms.Config = std::move(Config);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenLiveShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScreenPercent                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenLiveShow(const class FString& URL, const int32 ScreenPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenLiveShow");

	Params::WMActivitySDKSubsystem_OpenLiveShow Parms{};

	Parms.URL = std::move(URL);
	Parms.ScreenPercent = ScreenPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenPortraitLiveShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenPortraitLiveShow(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenPortraitLiveShow");

	Params::WMActivitySDKSubsystem_OpenPortraitLiveShow Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenSurvey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Result)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenSurvey(const class FString& URL, TDelegate<void(const class FString& Result)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenSurvey");

	Params::WMActivitySDKSubsystem_OpenSurvey Parms{};

	Parms.URL = std::move(URL);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.OpenSurveyDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           Result                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::OpenSurveyDelegate__DelegateSignature(const class FString& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenSurveyDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_OpenSurveyDelegate__DelegateSignature Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenSurveyWithConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMActivityWebViewConfiguration  Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Result)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenSurveyWithConfig(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config, TDelegate<void(const class FString& Result)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenSurveyWithConfig");

	Params::WMActivitySDKSubsystem_OpenSurveyWithConfig Parms{};

	Parms.URL = std::move(URL);
	Parms.Config = std::move(Config);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenUrl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenUrl(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenUrl");

	Params::WMActivitySDKSubsystem_OpenUrl Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenURLConfigWithComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMActivityWebViewConfiguration  Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenURLConfigWithComplete(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config, TDelegate<void()> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenURLConfigWithComplete");

	Params::WMActivitySDKSubsystem_OpenURLConfigWithComplete Parms{};

	Parms.URL = std::move(URL);
	Parms.Config = std::move(Config);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenUrlWithComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenUrlWithComplete(const class FString& URL, TDelegate<void()> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenUrlWithComplete");

	Params::WMActivitySDKSubsystem_OpenUrlWithComplete Parms{};

	Parms.URL = std::move(URL);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.OpenURLWithConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMActivityWebViewConfiguration  Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::OpenURLWithConfig(const class FString& URL, const struct FWMActivityWebViewConfiguration& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "OpenURLWithConfig");

	Params::WMActivitySDKSubsystem_OpenURLWithConfig Parms{};

	Parms.URL = std::move(URL);
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.Pause
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PauseAudio
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::PauseAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PauseAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PauseWhenEnterBackGround
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PauseWhenEnterBackGround(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PauseWhenEnterBackGround");

	Params::WMActivitySDKSubsystem_PauseWhenEnterBackGround Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PlayAudio
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMAudioInfo                     AudioInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PlayAudio(const struct FWMAudioInfo& AudioInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PlayAudio");

	Params::WMActivitySDKSubsystem_PlayAudio Parms{};

	Parms.AudioInfo = std::move(AudioInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PlayAudioFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PlayAudioFile(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PlayAudioFile");

	Params::WMActivitySDKSubsystem_PlayAudioFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.PlayAudioFileDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PlayAudioFileDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PlayAudioFileDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_PlayAudioFileDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.FilePath = std::move(FilePath);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PlayRecordVoice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PlayRecordVoice(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PlayRecordVoice");

	Params::WMActivitySDKSubsystem_PlayRecordVoice Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PlayVideo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlatformType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PlayVideo(const class FString& Path, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback, int32 PlatformType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PlayVideo");

	Params::WMActivitySDKSubsystem_PlayVideo Parms{};

	Parms.Path = std::move(Path);
	Parms.Callback = Callback;
	Parms.PlatformType = PlatformType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.PreloadWebpageResource
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Urls                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::PreloadWebpageResource(const TArray<class FString>& Urls)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "PreloadWebpageResource");

	Params::WMActivitySDKSubsystem_PreloadWebpageResource Parms{};

	Parms.Urls = std::move(Urls);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.QueryCurrentlyOpenedWebview
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWMActivitySDKSubsystem::QueryCurrentlyOpenedWebview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "QueryCurrentlyOpenedWebview");

	Params::WMActivitySDKSubsystem_QueryCurrentlyOpenedWebview Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ReceiveActivityAwards
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ActivityId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::ReceiveActivityAwards(const class FString& ActivityId, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ReceiveActivityAwards");

	Params::WMActivitySDKSubsystem_ReceiveActivityAwards Parms{};

	Parms.ActivityId = std::move(ActivityId);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.RecognizeAudio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& URL, const class FString& Text, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RecognizeAudio(const class FString& URL, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& Text, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RecognizeAudio");

	Params::WMActivitySDKSubsystem_RecognizeAudio Parms{};

	Parms.URL = std::move(URL);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.RecognizeAudioDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RecognizeAudioDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& Text, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RecognizeAudioDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_RecognizeAudioDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.URL = std::move(URL);
	Parms.Text = std::move(Text);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.RecordMicVolumeDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RecordMicVolumeDelegate__DelegateSignature(int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RecordMicVolumeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_RecordMicVolumeDelegate__DelegateSignature Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.RecordProgressDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RecordProgressDelegate__DelegateSignature(const class FString& FilePath, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RecordProgressDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_RecordProgressDelegate__DelegateSignature Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.RecordResultDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RecordResultDelegate__DelegateSignature(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RecordResultDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_RecordResultDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.FilePath = std::move(FilePath);
	Parms.Duration = Duration;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.RedeemCouponCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           CouponCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ServerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RoleLevel                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VipLevel                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ExtraInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>OnRedeemCouponResult                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RedeemCouponCode(const class FString& CouponCode, const class FString& UserId, const class FString& Token, const class FString& ServerId, const class FString& RoleId, const class FString& RoleLevel, const class FString& VipLevel, const TMap<class FString, class FString>& ExtraInfo, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> OnRedeemCouponResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RedeemCouponCode");

	Params::WMActivitySDKSubsystem_RedeemCouponCode Parms{};

	Parms.CouponCode = std::move(CouponCode);
	Parms.UserId = std::move(UserId);
	Parms.Token = std::move(Token);
	Parms.ServerId = std::move(ServerId);
	Parms.RoleId = std::move(RoleId);
	Parms.RoleLevel = std::move(RoleLevel);
	Parms.VipLevel = std::move(VipLevel);
	Parms.ExtraInfo = std::move(ExtraInfo);
	Parms.OnRedeemCouponResult = OnRedeemCouponResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.RemoveAudioBlackList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RemoveAudioBlackList(const class FString& RoleId, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RemoveAudioBlackList");

	Params::WMActivitySDKSubsystem_RemoveAudioBlackList Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.RequestPermission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWMWebPermissionType                    PermissionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(EWMWebPermissionType PermissionType, int32 PermissionStatus)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RequestPermission(EWMWebPermissionType PermissionType, TDelegate<void(EWMWebPermissionType PermissionType, int32 PermissionStatus)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RequestPermission");

	Params::WMActivitySDKSubsystem_RequestPermission Parms{};

	Parms.PermissionType = PermissionType;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.RespondToCustomJSEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Result                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Handle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::RespondToCustomJSEvent(const class FString& Result, int64 Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "RespondToCustomJSEvent");

	Params::WMActivitySDKSubsystem_RespondToCustomJSEvent Parms{};

	Parms.Result = std::move(Result);
	Parms.Handle = Handle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.Resume
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::Resume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "Resume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ResumeAudio
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::ResumeAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ResumeAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ResumeLiveShowAudio
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::ResumeLiveShowAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ResumeLiveShowAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SaveImageToPhotoAlbum
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMShareToForumInfo              Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SaveImageToPhotoAlbum(const struct FWMShareToForumInfo& Image, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SaveImageToPhotoAlbum");

	Params::WMActivitySDKSubsystem_SaveImageToPhotoAlbum Parms{};

	Parms.Image = std::move(Image);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SaveVideoToPhotoAlbum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           VideoPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SaveVideoToPhotoAlbum(const class FString& VideoPath, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SaveVideoToPhotoAlbum");

	Params::WMActivitySDKSubsystem_SaveVideoToPhotoAlbum Parms{};

	Parms.VideoPath = std::move(VideoPath);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SeekAudio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SeekAudio(int32 Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SeekAudio");

	Params::WMActivitySDKSubsystem_SeekAudio Parms{};

	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SendEventToJavaScript
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Response)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SendEventToJavaScript(const class FString& Type, const TMap<class FString, class FString>& Payload, TDelegate<void(const class FString& Response)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SendEventToJavaScript");

	Params::WMActivitySDKSubsystem_SendEventToJavaScript Parms{};

	Parms.Type = std::move(Type);
	Parms.Payload = std::move(Payload);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetActivityHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ActivityHost                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetActivityHost(const class FString& ActivityHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetActivityHost");

	Params::WMActivitySDKSubsystem_SetActivityHost Parms{};

	Parms.ActivityHost = std::move(ActivityHost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetAudioRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetAudioRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetAudioRate");

	Params::WMActivitySDKSubsystem_SetAudioRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetAudioRoleType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RoleType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetAudioRoleType(int32 RoleType, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetAudioRoleType");

	Params::WMActivitySDKSubsystem_SetAudioRoleType Parms{};

	Parms.RoleType = RoleType;
	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetAudioVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetAudioVolume(int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetAudioVolume");

	Params::WMActivitySDKSubsystem_SetAudioVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetBaseURL
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetBaseURL(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetBaseURL");

	Params::WMActivitySDKSubsystem_SetBaseURL Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetBoardMaterialHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           BoardMaterialHost                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetBoardMaterialHost(const class FString& BoardMaterialHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetBoardMaterialHost");

	Params::WMActivitySDKSubsystem_SetBoardMaterialHost Parms{};

	Parms.BoardMaterialHost = std::move(BoardMaterialHost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetChannelId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ChannelId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetChannelId(const class FString& ChannelId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetChannelId");

	Params::WMActivitySDKSubsystem_SetChannelId Parms{};

	Parms.ChannelId = std::move(ChannelId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetChannelType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetChannelType(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetChannelType");

	Params::WMActivitySDKSubsystem_SetChannelType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetCosAuditHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CosAuditHost                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetCosAuditHost(const class FString& CosAuditHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetCosAuditHost");

	Params::WMActivitySDKSubsystem_SetCosAuditHost Parms{};

	Parms.CosAuditHost = std::move(CosAuditHost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetCosHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CosHost                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetCosHost(const class FString& CosHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetCosHost");

	Params::WMActivitySDKSubsystem_SetCosHost Parms{};

	Parms.CosHost = std::move(CosHost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetDefaultWebViewConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMActivityWebViewConfiguration  Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetDefaultWebViewConfig(const struct FWMActivityWebViewConfiguration& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetDefaultWebViewConfig");

	Params::WMActivitySDKSubsystem_SetDefaultWebViewConfig Parms{};

	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetGameLanguage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           GameLanguage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetGameLanguage(const class FString& GameLanguage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetGameLanguage");

	Params::WMActivitySDKSubsystem_SetGameLanguage Parms{};

	Parms.GameLanguage = std::move(GameLanguage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetGameRoleInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMActivityGameRoleInfo          RoleInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetGameRoleInfo(const struct FWMActivityGameRoleInfo& RoleInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetGameRoleInfo");

	Params::WMActivitySDKSubsystem_SetGameRoleInfo Parms{};

	Parms.RoleInfo = std::move(RoleInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetLiveShowMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetLiveShowMute(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetLiveShowMute");

	Params::WMActivitySDKSubsystem_SetLiveShowMute Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetLoudspeaker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetLoudspeaker(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetLoudspeaker");

	Params::WMActivitySDKSubsystem_SetLoudspeaker Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetMediaId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MediaID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetMediaId(const class FString& MediaID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetMediaId");

	Params::WMActivitySDKSubsystem_SetMediaId Parms{};

	Parms.MediaID = std::move(MediaID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetMic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetMic(bool bEnable, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetMic");

	Params::WMActivitySDKSubsystem_SetMic Parms{};

	Parms.bEnable = bEnable;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetMicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetMicVolume(int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetMicVolume");

	Params::WMActivitySDKSubsystem_SetMicVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetMomentHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MomentHost                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetMomentHost(const class FString& MomentHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetMomentHost");

	Params::WMActivitySDKSubsystem_SetMomentHost Parms{};

	Parms.MomentHost = std::move(MomentHost);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetPTTMicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetPTTMicVolume(int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetPTTMicVolume");

	Params::WMActivitySDKSubsystem_SetPTTMicVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetPTTSpeakerVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetPTTSpeakerVolume(int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetPTTSpeakerVolume");

	Params::WMActivitySDKSubsystem_SetPTTSpeakerVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetReadExternalStoragePermissionNameResId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWMWebPermissionType                    Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ResIds                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetReadExternalStoragePermissionNameResId(EWMWebPermissionType Type, const TArray<class FString>& ResIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetReadExternalStoragePermissionNameResId");

	Params::WMActivitySDKSubsystem_SetReadExternalStoragePermissionNameResId Parms{};

	Parms.Type = Type;
	Parms.ResIds = std::move(ResIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetScreenOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Orientation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetScreenOrientation(int32 Orientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetScreenOrientation");

	Params::WMActivitySDKSubsystem_SetScreenOrientation Parms{};

	Parms.Orientation = Orientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetSDKType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetSDKType(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetSDKType");

	Params::WMActivitySDKSubsystem_SetSDKType Parms{};

	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetSpeakerVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetSpeakerVolume(int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetSpeakerVolume");

	Params::WMActivitySDKSubsystem_SetSpeakerVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetSupportDomStorage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsSupportDomStorage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetSupportDomStorage(bool bIsSupportDomStorage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetSupportDomStorage");

	Params::WMActivitySDKSubsystem_SetSupportDomStorage Parms{};

	Parms.bIsSupportDomStorage = bIsSupportDomStorage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RoleId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ServerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWMAudioPlatform                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetUp(const class FString& RoleId, const class FString& UserId, const class FString& ServerId, EWMAudioPlatform Type, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetUp");

	Params::WMActivitySDKSubsystem_SetUp Parms{};

	Parms.RoleId = std::move(RoleId);
	Parms.UserId = std::move(UserId);
	Parms.ServerId = std::move(ServerId);
	Parms.Type = Type;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.SetUserMicStreamMaxVolumeDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           MaxVolumeOpenId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxVolume                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetUserMicStreamMaxVolumeDelegate__DelegateSignature(const class FString& MaxVolumeOpenId, int32 MaxVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetUserMicStreamMaxVolumeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_SetUserMicStreamMaxVolumeDelegate__DelegateSignature Parms{};

	Parms.MaxVolumeOpenId = std::move(MaxVolumeOpenId);
	Parms.MaxVolume = MaxVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.SetUserMicStreamVolumeDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// class FString                           VolumeOpenId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetUserMicStreamVolumeDelegate__DelegateSignature(const class FString& VolumeOpenId, int32 Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetUserMicStreamVolumeDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_SetUserMicStreamVolumeDelegate__DelegateSignature Parms{};

	Parms.VolumeOpenId = std::move(VolumeOpenId);
	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.SetUserMicStreamVolumeHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& VolumeOpenId, int32 Volume)>VolumeDelegate                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& MaxVolumeOpenId, int32 MaxVolume)>MaxVolumeDelegate                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::SetUserMicStreamVolumeHandler(TDelegate<void(const class FString& VolumeOpenId, int32 Volume)> VolumeDelegate, TDelegate<void(const class FString& MaxVolumeOpenId, int32 MaxVolume)> MaxVolumeDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "SetUserMicStreamVolumeHandler");

	Params::WMActivitySDKSubsystem_SetUserMicStreamVolumeHandler Parms{};

	Parms.VolumeDelegate = VolumeDelegate;
	Parms.MaxVolumeDelegate = MaxVolumeDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ShareImageToForum
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ForumUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWMShareToForumInfo              Info                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::ShareImageToForum(const class FString& ForumUrl, const struct FWMShareToForumInfo& Info, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ShareImageToForum");

	Params::WMActivitySDKSubsystem_ShareImageToForum Parms{};

	Parms.ForumUrl = std::move(ForumUrl);
	Parms.Info = std::move(Info);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ShowActivityList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::ShowActivityList(const TArray<class FString>& Types, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ShowActivityList");

	Params::WMActivitySDKSubsystem_ShowActivityList Parms{};

	Parms.Types = std::move(Types);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ShowActivityListAndExtendWithComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Extend                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       CompleteCallback                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::ShowActivityListAndExtendWithComplete(const TArray<class FString>& Types, const TMap<class FString, class FString>& Extend, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> ResultCallback, TDelegate<void()> CompleteCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ShowActivityListAndExtendWithComplete");

	Params::WMActivitySDKSubsystem_ShowActivityListAndExtendWithComplete Parms{};

	Parms.Types = std::move(Types);
	Parms.Extend = std::move(Extend);
	Parms.ResultCallback = ResultCallback;
	Parms.CompleteCallback = CompleteCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.ShowActivityListCompleteDelegate__DelegateSignature
// (Public, Delegate)

void UWMActivitySDKSubsystem::ShowActivityListCompleteDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ShowActivityListCompleteDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.ShowActivityListWithExtend
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Types                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Extend                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWMActivitySDKSubsystem::ShowActivityListWithExtend(const TArray<class FString>& Types, const TMap<class FString, class FString>& Extend, TDelegate<void(bool bSucceed, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "ShowActivityListWithExtend");

	Params::WMActivitySDKSubsystem_ShowActivityListWithExtend Parms{};

	Parms.Types = std::move(Types);
	Parms.Extend = std::move(Extend);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StartRecording
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bTranslate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Volume)>           RecordMicVolumeCallback                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& FilePath, const class FString& Text)>ProgressCallback                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)>ResultCallback                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::StartRecording(bool bTranslate, TDelegate<void(int32 Volume)> RecordMicVolumeCallback, TDelegate<void(const class FString& FilePath, const class FString& Text)> ProgressCallback, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> ResultCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StartRecording");

	Params::WMActivitySDKSubsystem_StartRecording Parms{};

	Parms.bTranslate = bTranslate;
	Parms.RecordMicVolumeCallback = RecordMicVolumeCallback;
	Parms.ProgressCallback = ProgressCallback;
	Parms.ResultCallback = ResultCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StartRecordVoice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::StartRecordVoice(int32 Duration, TDelegate<void(bool bSucceed, const class FString& FilePath, int32 Duration, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StartRecordVoice");

	Params::WMActivitySDKSubsystem_StartRecordVoice Parms{};

	Parms.Duration = Duration;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StartScreenRecording
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMScreenRecordingConfig         Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& RecordFilePath, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       StartDelegate                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::StartScreenRecording(const struct FWMScreenRecordingConfig& Config, TDelegate<void(bool bSucceed, const class FString& RecordFilePath, int32 Code, const class FString& Msg)> Callback, TDelegate<void()> StartDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StartScreenRecording");

	Params::WMActivitySDKSubsystem_StartScreenRecording Parms{};

	Parms.Config = std::move(Config);
	Parms.Callback = Callback;
	Parms.StartDelegate = StartDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.WMScreenRecordStartDelegate__DelegateSignature
// (Public, Delegate)

void UWMActivitySDKSubsystem::WMScreenRecordStartDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "WMScreenRecordStartDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.WMScreenRecordingDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RecordFilePath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::WMScreenRecordingDelegate__DelegateSignature(bool bSucceed, const class FString& RecordFilePath, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "WMScreenRecordingDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_WMScreenRecordingDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.RecordFilePath = std::move(RecordFilePath);
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StopAudio
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::StopAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StopAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StopPlayingAudioFile
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::StopPlayingAudioFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StopPlayingAudioFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StopPlayRecordVoice
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::StopPlayRecordVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StopPlayRecordVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StopRecording
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCancel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::StopRecording(bool bCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StopRecording");

	Params::WMActivitySDKSubsystem_StopRecording Parms{};

	Parms.bCancel = bCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StopRecordVoice
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::StopRecordVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StopRecordVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.StopScreenRecording
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::StopScreenRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "StopScreenRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UnsetUp
// (Final, Native, Public, BlueprintCallable)

void UWMActivitySDKSubsystem::UnsetUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UnsetUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadAudioFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& URL, const class FString& UrlSuffix, int32 Duration, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadAudioFile(const class FString& FilePath, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& UrlSuffix, int32 Duration, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadAudioFile");

	Params::WMActivitySDKSubsystem_UploadAudioFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction WMActivitySDK.WMActivitySDKSubsystem.UploadAudioFileDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// bool                                    bSucceed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UrlSuffix                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadAudioFileDelegate__DelegateSignature(bool bSucceed, const class FString& URL, const class FString& UrlSuffix, int32 Duration, int32 Code, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadAudioFileDelegate__DelegateSignature");

	Params::WMActivitySDKSubsystem_UploadAudioFileDelegate__DelegateSignature Parms{};

	Parms.bSucceed = bSucceed;
	Parms.URL = std::move(URL);
	Parms.UrlSuffix = std::move(UrlSuffix);
	Parms.Duration = Duration;
	Parms.Code = Code;
	Parms.Msg = std::move(Msg);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadAvatarFromMediaLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadAvatarFromMediaLibrary(TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadAvatarFromMediaLibrary");

	Params::WMActivitySDKSubsystem_UploadAvatarFromMediaLibrary Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSUploadTask                 Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadFile(const struct FWMCOSUploadTask& Task, TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadFile");

	Params::WMActivitySDKSubsystem_UploadFile Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSUploadTask                 Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadImage(const struct FWMCOSUploadTask& Task, TDelegate<void(bool bSucceed, const class FString& URL, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadImage");

	Params::WMActivitySDKSubsystem_UploadImage Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadImageList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FWMCOSUploadTask>         Tasks                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(TArray<struct FWMCOSUploadCallbackInfo>& UploadCallbackInfos)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadImageList(const TArray<struct FWMCOSUploadTask>& Tasks, const TDelegate<void(TArray<struct FWMCOSUploadCallbackInfo>& UploadCallbackInfos)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadImageList");

	Params::WMActivitySDKSubsystem_UploadImageList Parms{};

	Parms.Tasks = std::move(Tasks);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadImagesFromMediaLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceed, TArray<class FString>& Urls, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadImagesFromMediaLibrary(TDelegate<void(bool bSucceed, TArray<class FString>& Urls, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadImagesFromMediaLibrary");

	Params::WMActivitySDKSubsystem_UploadImagesFromMediaLibrary Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadRecordVoiceFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSUploadTask                 Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& FileUrl, const class FString& Content, int32 Code, const class FString& Msg)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadRecordVoiceFile(const struct FWMCOSUploadTask& Task, const TDelegate<void(const class FString& FileUrl, const class FString& Content, int32 Code, const class FString& Msg)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadRecordVoiceFile");

	Params::WMActivitySDKSubsystem_UploadRecordVoiceFile Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadVideo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWMCOSUploadTask                 Task                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadVideo(const struct FWMCOSUploadTask& Task, TDelegate<void(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadVideo");

	Params::WMActivitySDKSubsystem_UploadVideo Parms{};

	Parms.Task = std::move(Task);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WMActivitySDK.WMActivitySDKSubsystem.UploadVideoFromMediaLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWMActivitySDKSubsystem::UploadVideoFromMediaLibrary(TDelegate<void(bool bSucceed, const class FString& URL, const class FString& CoverUrl, int32 Code, const class FString& Msg)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WMActivitySDKSubsystem", "UploadVideoFromMediaLibrary");

	Params::WMActivitySDKSubsystem_UploadVideoFromMediaLibrary Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

